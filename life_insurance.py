# -*- coding: utf-8 -*-
"""Life_insurance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mfzQfS4Bol3aUqnr5W-uUhMpvBQomRwz
"""

# Python libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math

"""Import data from excel to dataframe"""

# from google.colab import drive
# drive.mount('/content/drive')

file_name_eco = "economic.csv"
file_name_mor = "mortality.csv"
file_name_inforce = "inforce_dataset.csv"
# Read the CSV file into a DataFrame
eco_df = pd.read_csv(file_name_eco)
mor_df = pd.read_csv(file_name_mor)
inforce_df = pd.read_csv(file_name_inforce)


# Display the first few rows of the DataFrame
print(eco_df.head())
print(mor_df.head())
print(inforce_df.head())

eco_df['One plus interest rate'] = 1 + eco_df['1-yr Risk Free Annual Spot Rate']

#Calculate the compounded discount rate for 2000 and 2024
# Find the index where the Year equals 2000
start_index = eco_df[eco_df['Year'] == 2001].index.min()
# print(start_index)
# Apply cumprod() from the row where Year is 2000 onwards
eco_df['compounded interest rate 2001'] = 1  # Initialize the column with 1s
eco_df.loc[start_index:, 'compounded interest rate 2001'] = eco_df.loc[start_index:, 'One plus interest rate'].cumprod()

# Find the index where the Year equals 2024
start_index_24 = eco_df[eco_df['Year'] == 2024].index.min()
# print(start_index_24)
# Apply cumprod() from the row where Year is 2024 onwards
eco_df['compounded interest rate 2024'] = 1  # Initialize the column with 1s
eco_df.loc[start_index_24:, 'compounded interest rate 2024'] = eco_df.loc[start_index_24:, 'One plus interest rate'].cumprod()
eco_df

"""# Loading for 2023"""

inforce_df['Age.at.Death'] = inforce_df['Year.of.Death'] - inforce_df['Issue.year'] + inforce_df['Issue.age']

# get the current age in 2023
current_year = 2023
inforce_df['age2023'] = current_year - inforce_df['Issue.year'] + inforce_df['Issue.age']
filtered_rows = []

# Iterate over each row in the DataFrame
for index, row in inforce_df.iterrows():
    # Check if issue year is before 2023
    if row['Issue.year'] > current_year:
      continue
    if row['Year.of.Lapse'] < current_year:
      continue
    if row['Year.of.Death'] > current_year :
      continue
    filtered_rows.append(row)

# Create a new DataFrame from the filtered list of rows
df_up_to_2023 = pd.DataFrame(filtered_rows)

# Display the filtered DataFrame
print(df_up_to_2023)

# Define age groups
age_groups = {
    '26-35': (26, 35),
    '36-45': (36, 45),
    '46-55': (46, 55),
    '56-65': (56, 65),
    '66-75': (66, 75),
    '76-85': (76, 85),
    '86-100': (86, 100),
    '100+': (101, float('inf'))
}

# Initialize dictionaries to store mortality rates
mortality_rates = {group: 0 for group in age_groups}
smoker_mortality_rates = {group: 0 for group in age_groups}

# Iterate over age groups
for group, (min_age, max_age) in age_groups.items():
    # Filter DataFrame for age group
    age_group_df = df_up_to_2023[(df_up_to_2023['age2023'] >= min_age) & (df_up_to_2023['age2023'] <= max_age)]


    # Count total deaths in age group
    total_deaths = age_group_df[age_group_df['Year.of.Death'] == current_year].shape[0]

    # Count deaths among smokers in age group
    smoker_deaths = age_group_df[(age_group_df['Smoker.Status'] == 'S') & (age_group_df['Year.of.Death'] == current_year)].shape[0]

    # Calculate mortality rate for age group
    if total_deaths > 0:
        mortality_rates[group] = total_deaths / age_group_df.shape[0]

    # Calculate mortality rate for smokers in age group
    if smoker_deaths > 0:
        smoker_mortality_rates[group] = smoker_deaths / age_group_df[(age_group_df['Smoker.Status'] == 'S')].shape[0]

# Display mortality rates
print("Mortality Rates for Each Age Group:")
print(mortality_rates)
print("\nMortality Rates for Smokers in Each Age Group:")
print(smoker_mortality_rates)

non_smoker_mortality_rates = {group: 0 for group in age_groups}
very_low_risk_mortality_rates = {group: 0 for group in age_groups}
low_risk_mortality_rates = {group: 0 for group in age_groups}
mod_risk_mortality_rates = {group: 0 for group in age_groups}
high_risk_mortality_rates = {group: 0 for group in age_groups}


# Iterate over age groups
for group, (min_age, max_age) in age_groups.items():
    # Filter DataFrame for age group
    age_group_df = df_up_to_2023[(df_up_to_2023['age2023'] >= min_age) & (df_up_to_2023['age2023'] <= max_age)]


    # Count deaths among smokers in age group
    non_smoker_deaths = age_group_df[(age_group_df['Smoker.Status'] == 'NS') & (age_group_df['Year.of.Death'] == current_year)].shape[0]
    low_risk_deaths = age_group_df[(age_group_df['Underwriting.Class'] == 'low risk') & (age_group_df['Year.of.Death'] == current_year)].shape[0]
    very_low_risk_deaths = age_group_df[(age_group_df['Underwriting.Class'] == 'very low risk') & (age_group_df['Year.of.Death'] == current_year)].shape[0]
    mod_risk_deaths = age_group_df[(age_group_df['Underwriting.Class'] == 'moderate risk') & (age_group_df['Year.of.Death'] == current_year)].shape[0]
    high_risk_deaths = age_group_df[(age_group_df['Underwriting.Class'] == 'high risk') & (age_group_df['Year.of.Death'] == current_year)].shape[0]



    # Calculate mortality rate for non smokers in age group
    if non_smoker_deaths > 0:
        non_smoker_mortality_rates[group] = non_smoker_deaths / age_group_df[(age_group_df['Smoker.Status'] == 'NS')].shape[0]

    # Calculate mortality rate for low risk policyholder in age group
    if low_risk_deaths > 0:
        low_risk_mortality_rates[group] = low_risk_deaths / age_group_df[(age_group_df['Underwriting.Class'] == 'low risk')].shape[0]

    # Calculate mortality rate for low risk policyholder in age group
    if very_low_risk_deaths > 0:
        very_low_risk_mortality_rates[group] = very_low_risk_deaths / age_group_df[(age_group_df['Underwriting.Class'] == 'very low risk')].shape[0]

    # Calculate mortality rate for moderate risk policyholder in age group
    if mod_risk_deaths > 0:
        mod_risk_mortality_rates[group] = mod_risk_deaths / age_group_df[(age_group_df['Underwriting.Class'] == 'moderate risk')].shape[0]
    # Calculate mortality rate for low risk policyholder in age group
    if high_risk_deaths > 0:
        high_risk_mortality_rates[group] = high_risk_deaths / age_group_df[(age_group_df['Underwriting.Class'] == 'high risk')].shape[0]

# Display mortality rates

print("\nMortality Rates for Non Smokers in Each Age Group:")
print(non_smoker_mortality_rates)

print("\nMortality Rates for very low risk policyholder in Each Age Group:")
print(very_low_risk_mortality_rates)

print("\nMortality Rates for low risk policyholder in Each Age Group:")
print(low_risk_mortality_rates)

print("\nMortality Rates for moderate risk policyholder in Each Age Group:")
print(mod_risk_mortality_rates)

print("\nMortality Rates for high risk policyholder in Each Age Group:")
print(high_risk_mortality_rates)

"""Calculate the corresponding rate for each factor to do the factor loading"""

# get the ratio for each age group
s_ratio = {group: 0 for group in age_groups}
ns_ratio = {group: 0 for group in age_groups}
vlr_ratio = {group: 0 for group in age_groups}
lr_ratio = {group: 0 for group in age_groups}
mr_ratio = {group: 0 for group in age_groups}
hr_ratio = {group: 0 for group in age_groups}
for key in mortality_rates:
  if mortality_rates[key] == 0:
    s_ratio[key] = 1
    ns_ratio[key] = 1
    vlr_ratio[key] = 1
    lr_ratio[key] = 1
    mr_ratio[key] = 1
    hr_ratio[key] = 1
    continue
  s_ratio[key] = smoker_mortality_rates[key] / mortality_rates[key]
  ns_ratio[key] = non_smoker_mortality_rates[key] / mortality_rates[key]
  vlr_ratio[key] = very_low_risk_mortality_rates[key] / mortality_rates[key]
  lr_ratio[key] = low_risk_mortality_rates[key] / mortality_rates[key]
  mr_ratio[key] = mod_risk_mortality_rates[key] / mortality_rates[key]
  hr_ratio[key] = high_risk_mortality_rates[key] / mortality_rates[key]
print(vlr_ratio)
print(lr_ratio)
print(mr_ratio)
print(hr_ratio)
print(s_ratio)
print(ns_ratio)

# get the minmium ratio and maximim ratio

lower_boundry = min(min(s_ratio.values()), min(ns_ratio.values()), min(lr_ratio.values()), min(mr_ratio.values()), min(hr_ratio.values()))
print(lower_boundry)
higher_boundry = max(max(s_ratio.values()), max(ns_ratio.values()), max(lr_ratio.values()), max(mr_ratio.values()), max(hr_ratio.values()))
print(higher_boundry)

# do thrinkag in the ratio
def shrink_number(num, given, real):
    a = (given - 1) / (real - 1)
    b = 1 - a
    return a * num + b
vlr_loading = {group: 0 for group in age_groups}
lr_loading = {group: 0 for group in age_groups}
s_loading = {group: 0 for group in age_groups}
mr_loading = {group: 0 for group in age_groups}
hr_loading = {group: 0 for group in age_groups}
ns_loading = {group: 0 for group in age_groups}
for key in age_groups:
  vlr_loading[key] = shrink_number(vlr_ratio[key], 0.8, lower_boundry)
  lr_loading[key] = shrink_number(lr_ratio[key], 0.8, lower_boundry)
  ns_loading[key] = shrink_number(ns_ratio[key], 0.8, lower_boundry)

# def shrink_number(num, given, real):
#     a = (given - 1) / (real - 1)
#     b = 1 - a
#     return a * num + b

# lr_loading = {group: 0 for group in age_groups}
# ns_loading = {group: 0 for group in age_groups}
# for key in age_groups:
#   lr_loading[key] = shrink_number(lr_ratio[key], 0.8, lower_boundry)
#   ns_loading[key] = shrink_number(ns_ratio[key], 0.8, lower_boundry)


for key in age_groups:
  mr_loading[key] = shrink_number(mr_ratio[key], 1.5, higher_boundry)
  hr_loading[key] = shrink_number(hr_ratio[key], 1.5, higher_boundry)
  s_loading[key] = shrink_number(s_ratio[key], 1.5, higher_boundry)

for key, value in hr_loading.items():
  if value < 1:
    hr_loading[key] = 1


hr_loading = {key: round(value, 2) for key, value in hr_loading.items()}
mr_loading = {key: round(value, 2) for key, value in mr_loading.items()}
vlr_loading = {key: round(value, 2) for key, value in vlr_loading.items()}
lr_loading = {key: round(value, 2) for key, value in lr_loading.items()}
ns_loading = {key: round(value, 2) for key, value in ns_loading.items()}
s_loading = {key: round(value, 2) for key, value in s_loading.items()}
print(hr_loading)
print(mr_loading)
print(s_loading)
print(vlr_loading)
print(lr_loading)
print(ns_loading)

"""Adding the loading to the given mortality table"""

# Mortality loadings for different age groups
mortality_loadings = {
    'hr_loading': hr_loading,
    'mr_loading': mr_loading,
    's_loading': s_loading,
    'vlr_loading': vlr_loading,
    'lr_loading': lr_loading,
    'ns_loading': ns_loading
}

mor_df = pd.read_csv(file_name_mor)
mor_df = mor_df.dropna(how='all')
mor_df = mor_df.dropna(axis=1, how='all')
# Iterate over each loading type
for loading_name, mortality_loading_dict in mortality_loadings.items():
  # Create a new column for the total loading of this type
  mor_df[f'{loading_name}_total'] = 1  # Initialize the total loading column with a default value of 1

  # Iterate over each age group and calculate the total loading
  for age_group, loading in mortality_loading_dict.items():
    lower, higher = age_groups[age_group]
    try:
      higher = int(higher)  # Try converting to integer
    except OverflowError:
      higher = 120  # Set to 120 if conversion fails (indicating it's a float or non-numeric)
    for ages in range(lower, higher+1):
      mor_df.loc[mor_df['Age'] == ages, f'{loading_name}_total'] = loading

mor_df

"""Adding decrement of moratality considred the proposed program"""

# update a new mortality tabble with program proposed
# Participation Based Mortality Decrement
participation_based_decrement = {
    '25-34': 0.043,
    '35-44': 0.061,
    '45-54': 0.083,
    '55-64': 0.091,
    '65-74': 0.048,
    '75+': 0.013
}

updated_mor_table = mor_df.copy()
for ages in range(25, 35):
  updated_mor_table.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] = mor_df.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] * (1-0.043)
for ages in range(35, 45):
  updated_mor_table.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] = mor_df.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] * (1-0.061)
for ages in range(45, 55):
  updated_mor_table.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] = mor_df.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] * (1-0.083)
for ages in range(55, 65):
  updated_mor_table.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] = mor_df.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] * (1-0.09)
for ages in range(65, 75):
  updated_mor_table.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] = mor_df.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] * (1-0.048)
for ages in range(75, 120):
  updated_mor_table.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] = mor_df.loc[updated_mor_table['Age'] == ages, 'Mortality Rate'] * (1-0.013)

print(updated_mor_table)
print(mor_df)

mor_df
# check the sensitivity test for mortality

mor_df['Mortality -10%'] = mor_df['Mortality Rate'] * 0.9
mor_df['Mortality +10%'] = mor_df['Mortality Rate'] * 1.1
mor_df.loc[mor_df['Age'] == 120, 'Mortality -10%'] = 1
mor_df.loc[mor_df['Age'] == 120, 'Mortality +10%'] = 1

#Calculate for mortality rate without program
mor_df['Mortality -10%'] = mor_df['Mortality Rate'] * 0.9
mor_df['Mortality +10%'] = mor_df['Mortality Rate'] * 1.1
mor_df.loc[mor_df['Age'] == 120, 'Mortality -10%'] = 1
mor_df.loc[mor_df['Age'] == 120, 'Mortality +10%'] = 1

mor_df

updated_mor_table
# check the sensitivity test for mortality

updated_mor_table['Mortality -10%'] = updated_mor_table['Mortality Rate'] * 0.9
updated_mor_table['Mortality +10%'] = updated_mor_table['Mortality Rate'] * 1.1
updated_mor_table.loc[updated_mor_table['Age'] == 120, 'Mortality -10%'] = 1
updated_mor_table.loc[updated_mor_table['Age'] == 120, 'Mortality +10%'] = 1

#Calculate for mortality rate without program
updated_mor_table['Mortality -10%'] = updated_mor_table['Mortality Rate'] * 0.9
updated_mor_table['Mortality +10%'] = updated_mor_table['Mortality Rate'] * 1.1
updated_mor_table.loc[updated_mor_table['Age'] == 120, 'Mortality -10%'] = 1
updated_mor_table.loc[updated_mor_table['Age'] == 120, 'Mortality +10%'] = 1

updated_mor_table

updated_mor_table.head(30)

expense = 210
current = 2024

# get the average inflation rate for the past 10 yeas

sum = 0
for year in range(2013, 2024):
    inflation_str = eco_df.loc[eco_df['Year'] == year, 'Inflation'].values[0]
    # inflation = float(inflation_str.rstrip('%')) / 100  # Remove '%' and convert to float
    #Juliet file
    inflation = float(inflation_str)
    #END
    sum += inflation

average_inflation = sum/10
print("average inflation:", average_inflation)

average_discounted = (0.0312 + 0.029)/2

# Create a list of years from 2024 to 2044
years = list(range(2024, 2045))

# Create a DataFrame with years as index
exp_df = pd.DataFrame(index = years)

exp_df['Year'] = years
exp_df['Expense'] = expense
exp_df['Expense after inflation'] = expense
exp_df['discounted rate'] = 1
exp_df['Expense after inflation'] = expense
exp_df['Expense after inflation -10%'] = expense
exp_df['Expense after inflation +10%'] = expense
exp_df['discounted rate -10%'] = 1
exp_df['discounted rate +10%'] = 1

####### all the discounted rate and inflation rate was calculated as sop value sinve we assumed the expense was pay out in the begining of the year
for element in range(2025, 2045):
 exp_df.loc[exp_df['Year'] == element, 'Expense after inflation'] = exp_df.loc[exp_df['Year'] == element, 'Expense'] * ( (1 + average_inflation) ** (element - 2024))

 exp_df.loc[exp_df['Year'] == element, 'discounted rate'] = ( 1 + average_discounted) ** (element - 2024)

 ## for sensitivity test:
 exp_df.loc[exp_df['Year'] == element, 'Expense after inflation -10%'] = exp_df.loc[exp_df['Year'] == element, 'Expense'] * ( (1 + average_inflation * 0.9) ** (element - 2024))
 exp_df.loc[exp_df['Year'] == element, 'Expense after inflation +10%'] = exp_df.loc[exp_df['Year'] == element, 'Expense'] * ( (1 + average_inflation * 1.1) ** (element - 2024))
 exp_df.loc[exp_df['Year'] == element, 'discounted rate -10%'] = ( 1 + average_discounted * 0.9) ** (element - 2024)
 exp_df.loc[exp_df['Year'] == element, 'discounted rate +10%'] = ( 1 + average_discounted * 1.1) ** (element - 2024)



# Display the DataFrame
print(exp_df)
exp_df

expenset20 = 300
current = 2024

# get the average inflation rate for the past 10 yeas

sum = 0
for year in range(2013, 2024):
    inflation_str = eco_df.loc[eco_df['Year'] == year, 'Inflation'].values[0]
    # inflation = float(inflation_str.rstrip('%')) / 100  # Remove '%' and convert to float
    #Juliet file
    inflation = float(inflation_str)
    #END
    sum += inflation

average_inflation = sum/10
print("average inflation:", average_inflation)

average_discounted = (0.0312 + 0.029)/2

# Create a list of years from 2024 to 2044
years = list(range(2024, 2045))

# Create a DataFrame with years as index
exp_dft20 = pd.DataFrame(index = years)

exp_dft20['Year'] = years
exp_dft20['Expense'] = expenset20
exp_dft20['Expense after inflation'] = expenset20
exp_dft20['discounted rate'] = 1
exp_dft20['Expense after inflation'] = expenset20
exp_dft20['Expense after inflation -10%'] = expenset20
exp_dft20['Expense after inflation +10%'] = expenset20
exp_dft20['discounted rate -10%'] = 1
exp_dft20['discounted rate +10%'] = 1

####### all the discounted rate and inflation rate was calculated as sop value sinve we assumed the expense was pay out in the begining of the year
for element in range(2025, 2045):
 exp_dft20.loc[exp_dft20['Year'] == element, 'Expense after inflation'] = exp_dft20.loc[exp_dft20['Year'] == element, 'Expense'] * ( (1 + average_inflation) ** (element - 2024))

 exp_df.loc[exp_df['Year'] == element, 'discounted rate'] = ( 1 + average_discounted) ** (element - 2024)

 ## for sensitivity test:
 exp_dft20.loc[exp_dft20['Year'] == element, 'Expense after inflation -10%'] = exp_dft20.loc[exp_dft20['Year'] == element, 'Expense'] * ( (1 + average_inflation * 0.9) ** (element - 2024))
 exp_dft20.loc[exp_dft20['Year'] == element, 'Expense after inflation +10%'] = exp_dft20.loc[exp_dft20['Year'] == element, 'Expense'] * ( (1 + average_inflation * 1.1) ** (element - 2024))
 exp_dft20.loc[exp_dft20['Year'] == element, 'discounted rate -10%'] = ( 1 + average_discounted * 0.9) ** (element - 2024)
 exp_dft20.loc[exp_dft20['Year'] == element, 'discounted rate +10%'] = ( 1 + average_discounted * 1.1) ** (element - 2024)



# Display the DataFrame
# print(exp_dft20)
exp_dft20

"""# 2. Start calculating new mortality table after loading"""

#Mortality table with policy
mor_df_cleaned = updated_mor_table.copy()
mor_df_cleaned['NS_very_low_risk_mortality'] = mor_df_cleaned['Mortality Rate'] * mor_df_cleaned['vlr_loading_total'] * mor_df_cleaned['ns_loading_total']
mor_df_cleaned['NS_low_risk_mortality'] = mor_df_cleaned['Mortality Rate']* mor_df_cleaned['lr_loading_total'] * mor_df_cleaned['ns_loading_total']
mor_df_cleaned['NS_moderate_risk_mortality'] = mor_df_cleaned['Mortality Rate']* mor_df_cleaned['mr_loading_total'] * mor_df_cleaned['ns_loading_total']
mor_df_cleaned['NS_high_risk_mortality'] = mor_df_cleaned['Mortality Rate']* mor_df_cleaned['hr_loading_total'] * mor_df_cleaned['ns_loading_total']
mor_df_cleaned['S_very_low_risk_mortality'] = mor_df_cleaned['Mortality Rate'] * mor_df_cleaned['vlr_loading_total'] * mor_df_cleaned['s_loading_total']
mor_df_cleaned['S_low_risk_mortality'] = mor_df_cleaned['Mortality Rate']* mor_df_cleaned['lr_loading_total'] * mor_df_cleaned['s_loading_total']
mor_df_cleaned['S_moderate_risk_mortality'] = mor_df_cleaned['Mortality Rate']* mor_df_cleaned['mr_loading_total'] * mor_df_cleaned['s_loading_total']
mor_df_cleaned['S_high_risk_mortality'] = mor_df_cleaned['Mortality Rate']* mor_df_cleaned['hr_loading_total'] * mor_df_cleaned['s_loading_total']



# # Define the order of the columns you want, after the 'Age' and 'Mortality Rate' columns
columns_order = [
    'Age', 'Mortality Rate','NS_very_low_risk_mortality',
    'NS_low_risk_mortality', 'NS_moderate_risk_mortality', 'NS_high_risk_mortality',
    'S_very_low_risk_mortality', 'S_low_risk_mortality', 'S_moderate_risk_mortality', 'S_high_risk_mortality'
]

mor_df_cleaned = mor_df_cleaned[columns_order]
mor_df_cleaned

# Generate mortality table without decrement (without policy)
mor_df_nop = mor_df.copy()
mor_df_nop['NS_very_low_risk_mortality'] = mor_df_nop['Mortality Rate'] * mor_df_nop['vlr_loading_total'] * mor_df_nop['ns_loading_total']
mor_df_nop['NS_low_risk_mortality'] = mor_df_nop['Mortality Rate']* mor_df_nop['lr_loading_total'] * mor_df_nop['ns_loading_total']
mor_df_nop['NS_moderate_risk_mortality'] = mor_df_nop['Mortality Rate']* mor_df_nop['mr_loading_total'] * mor_df_nop['ns_loading_total']
mor_df_nop['NS_high_risk_mortality'] = mor_df_nop['Mortality Rate']* mor_df_nop['hr_loading_total'] * mor_df_nop['ns_loading_total']
mor_df_nop['S_very_low_risk_mortality'] = mor_df_nop['Mortality Rate'] * mor_df_nop['vlr_loading_total'] * mor_df_nop['s_loading_total']
mor_df_nop['S_low_risk_mortality'] = mor_df_nop['Mortality Rate']* mor_df_nop['lr_loading_total'] * mor_df_nop['s_loading_total']
mor_df_nop['S_moderate_risk_mortality'] = mor_df_nop['Mortality Rate']* mor_df_nop['mr_loading_total'] * mor_df_nop['s_loading_total']
mor_df_nop['S_high_risk_mortality'] = mor_df_nop['Mortality Rate']* mor_df_nop['hr_loading_total'] * mor_df_nop['s_loading_total']



# # Define the order of the columns you want, after the 'Age' and 'Mortality Rate' columns
columns_order = [
    'Age', 'Mortality Rate','NS_very_low_risk_mortality',
    'NS_low_risk_mortality', 'NS_moderate_risk_mortality', 'NS_high_risk_mortality',
    'S_very_low_risk_mortality', 'S_low_risk_mortality', 'S_moderate_risk_mortality', 'S_high_risk_mortality'
]

mor_df_nop = mor_df_nop[columns_order]
mor_df_nop

# Generate mortality table Mortality -10%
mor_df_dec10 = updated_mor_table.copy()
mor_df_dec10['Mortality Rate'] = mor_df_dec10['Mortality -10%']
mor_df_dec10['NS_very_low_risk_mortality'] = mor_df_dec10['Mortality Rate'] * mor_df_dec10['vlr_loading_total'] * mor_df_dec10['ns_loading_total']
mor_df_dec10['NS_low_risk_mortality'] = mor_df_dec10['Mortality Rate']* mor_df_dec10['lr_loading_total'] * mor_df_dec10['ns_loading_total']
mor_df_dec10['NS_moderate_risk_mortality'] = mor_df_dec10['Mortality Rate']* mor_df_dec10['mr_loading_total'] * mor_df_dec10['ns_loading_total']
mor_df_dec10['NS_high_risk_mortality'] = mor_df_dec10['Mortality Rate']* mor_df_dec10['hr_loading_total'] * mor_df_dec10['ns_loading_total']
mor_df_dec10['S_very_low_risk_mortality'] = mor_df_dec10['Mortality Rate'] * mor_df_dec10['vlr_loading_total'] * mor_df_dec10['s_loading_total']
mor_df_dec10['S_low_risk_mortality'] = mor_df_dec10['Mortality Rate']* mor_df_dec10['lr_loading_total'] * mor_df_dec10['s_loading_total']
mor_df_dec10['S_moderate_risk_mortality'] = mor_df_dec10['Mortality Rate']* mor_df_dec10['mr_loading_total'] * mor_df_dec10['s_loading_total']
mor_df_dec10['S_high_risk_mortality'] = mor_df_dec10['Mortality Rate']* mor_df_dec10['hr_loading_total'] * mor_df_dec10['s_loading_total']



# # Define the order of the columns you want, after the 'Age' and 'Mortality Rate' columns
columns_order = [
    'Age', 'Mortality Rate','NS_very_low_risk_mortality',
    'NS_low_risk_mortality', 'NS_moderate_risk_mortality', 'NS_high_risk_mortality',
    'S_very_low_risk_mortality', 'S_low_risk_mortality', 'S_moderate_risk_mortality', 'S_high_risk_mortality'
]

mor_df_dec10 = mor_df_dec10[columns_order]
mor_df_dec10

updated_mor_table

# Generate mortality table Mortality -10% for without program
mor_df_dec10_np = mor_df.copy()
mor_df_dec10_np['Mortality Rate'] = mor_df_dec10_np['Mortality -10%']
mor_df_dec10_np['NS_very_low_risk_mortality'] = mor_df_dec10_np['Mortality Rate'] * mor_df_dec10_np['vlr_loading_total'] * mor_df_dec10_np['ns_loading_total']
mor_df_dec10_np['NS_low_risk_mortality'] = mor_df_dec10_np['Mortality Rate']* mor_df_dec10_np['lr_loading_total'] * mor_df_dec10_np['ns_loading_total']
mor_df_dec10_np['NS_moderate_risk_mortality'] = mor_df_dec10_np['Mortality Rate']* mor_df_dec10_np['mr_loading_total'] * mor_df_dec10_np['ns_loading_total']
mor_df_dec10_np['NS_high_risk_mortality'] = mor_df_dec10_np['Mortality Rate']* mor_df_dec10_np['hr_loading_total'] * mor_df_dec10_np['ns_loading_total']
mor_df_dec10_np['S_very_low_risk_mortality'] = mor_df_dec10_np['Mortality Rate'] * mor_df_dec10_np['vlr_loading_total'] * mor_df_dec10_np['s_loading_total']
mor_df_dec10_np['S_low_risk_mortality'] = mor_df_dec10_np['Mortality Rate']* mor_df_dec10_np['lr_loading_total'] * mor_df_dec10_np['s_loading_total']
mor_df_dec10_np['S_moderate_risk_mortality'] = mor_df_dec10_np['Mortality Rate']* mor_df_dec10_np['mr_loading_total'] * mor_df_dec10_np['s_loading_total']
mor_df_dec10_np['S_high_risk_mortality'] = mor_df_dec10_np['Mortality Rate']* mor_df_dec10_np['hr_loading_total'] * mor_df_dec10_np['s_loading_total']



# # Define the order of the columns you want, after the 'Age' and 'Mortality Rate' columns
columns_order = [
    'Age', 'Mortality Rate','NS_very_low_risk_mortality',
    'NS_low_risk_mortality', 'NS_moderate_risk_mortality', 'NS_high_risk_mortality',
    'S_very_low_risk_mortality', 'S_low_risk_mortality', 'S_moderate_risk_mortality', 'S_high_risk_mortality'
]

mor_df_dec10_np = mor_df_dec10_np[columns_order]
mor_df_dec10_np

# Generate mortality table Mortality +10%
mor_df_inc10 = updated_mor_table.copy()
mor_df_inc10['Mortality Rate'] = mor_df_inc10['Mortality +10%']
mor_df_inc10['NS_very_low_risk_mortality'] = mor_df_inc10['Mortality Rate'] * mor_df_inc10['vlr_loading_total'] * mor_df_inc10['ns_loading_total']
mor_df_inc10['NS_low_risk_mortality'] = mor_df_inc10['Mortality Rate']* mor_df_inc10['lr_loading_total'] * mor_df_inc10['ns_loading_total']
mor_df_inc10['NS_moderate_risk_mortality'] = mor_df_inc10['Mortality Rate']* mor_df_inc10['mr_loading_total'] * mor_df_inc10['ns_loading_total']
mor_df_inc10['NS_high_risk_mortality'] = mor_df_inc10['Mortality Rate']* mor_df_inc10['hr_loading_total'] * mor_df_inc10['ns_loading_total']
mor_df_inc10['S_very_low_risk_mortality'] = mor_df_inc10['Mortality Rate'] * mor_df_inc10['vlr_loading_total'] * mor_df_inc10['s_loading_total']
mor_df_inc10['S_low_risk_mortality'] = mor_df_inc10['Mortality Rate']* mor_df_inc10['lr_loading_total'] * mor_df_inc10['s_loading_total']
mor_df_inc10['S_moderate_risk_mortality'] = mor_df_inc10['Mortality Rate']* mor_df_inc10['mr_loading_total'] * mor_df_inc10['s_loading_total']
mor_df_inc10['S_high_risk_mortality'] = mor_df_inc10['Mortality Rate']* mor_df_inc10['hr_loading_total'] * mor_df_inc10['s_loading_total']



# # Define the order of the columns you want, after the 'Age' and 'Mortality Rate' columns
columns_order = [
    'Age', 'Mortality Rate','NS_very_low_risk_mortality',
    'NS_low_risk_mortality', 'NS_moderate_risk_mortality', 'NS_high_risk_mortality',
    'S_very_low_risk_mortality', 'S_low_risk_mortality', 'S_moderate_risk_mortality', 'S_high_risk_mortality'
]

mor_df_inc10 = mor_df_inc10[columns_order]
mor_df_inc10

# Generate mortality table Mortality +10% without program
mor_df_inc10_np = mor_df.copy()
mor_df_inc10_np['Mortality Rate'] = mor_df_inc10_np['Mortality +10%']
mor_df_inc10_np['NS_very_low_risk_mortality'] = mor_df_inc10_np['Mortality Rate'] * mor_df_inc10_np['vlr_loading_total'] * mor_df_inc10_np['ns_loading_total']
mor_df_inc10_np['NS_low_risk_mortality'] = mor_df_inc10_np['Mortality Rate']* mor_df_inc10_np['lr_loading_total'] * mor_df_inc10_np['ns_loading_total']
mor_df_inc10_np['NS_moderate_risk_mortality'] = mor_df_inc10_np['Mortality Rate']* mor_df_inc10_np['mr_loading_total'] * mor_df_inc10_np['ns_loading_total']
mor_df_inc10_np['NS_high_risk_mortality'] = mor_df_inc10_np['Mortality Rate']* mor_df_inc10_np['hr_loading_total'] * mor_df_inc10_np['ns_loading_total']
mor_df_inc10_np['S_very_low_risk_mortality'] = mor_df_inc10_np['Mortality Rate'] * mor_df_inc10_np['vlr_loading_total'] * mor_df_inc10_np['s_loading_total']
mor_df_inc10_np['S_low_risk_mortality'] = mor_df_inc10_np['Mortality Rate']* mor_df_inc10_np['lr_loading_total'] * mor_df_inc10_np['s_loading_total']
mor_df_inc10_np['S_moderate_risk_mortality'] = mor_df_inc10_np['Mortality Rate']* mor_df_inc10_np['mr_loading_total'] * mor_df_inc10_np['s_loading_total']
mor_df_inc10_np['S_high_risk_mortality'] = mor_df_inc10_np['Mortality Rate']* mor_df_inc10_np['hr_loading_total'] * mor_df_inc10_np['s_loading_total']



# # Define the order of the columns you want, after the 'Age' and 'Mortality Rate' columns
columns_order = [
    'Age', 'Mortality Rate','NS_very_low_risk_mortality',
    'NS_low_risk_mortality', 'NS_moderate_risk_mortality', 'NS_high_risk_mortality',
    'S_very_low_risk_mortality', 'S_low_risk_mortality', 'S_moderate_risk_mortality', 'S_high_risk_mortality'
]

mor_df_inc10_np = mor_df_inc10_np[columns_order]
mor_df_inc10_np

mor_df

updated_mor_table

"""# 3.Seperate the T20 and WL"""

# Get unique policy types
unique_policy_types = inforce_df['Policy.type'].unique()

# Create a dictionary to store DataFrames for each policy type
policy_type_data = {}

# Iterate over unique policy types
for policy_type in unique_policy_types:
    # Filter the DataFrame for the current policy type
    policy_type_df = inforce_df[inforce_df['Policy.type'] == policy_type]

    # Store the filtered DataFrame in the dictionary
    policy_type_data[policy_type] = policy_type_df

# Now policy_type_data dictionary contains separate DataFrames for each policy type
# You can access each DataFrame using its corresponding policy type as the key

# Example usage:
# Access DataFrame for policy type 'T20'
t20_df = policy_type_data['T20']
print("DataFrame for Policy Type 'T20':")
print(t20_df)

# Access DataFrame for policy type 'SPWL'
spwl_df = policy_type_data['SPWL']
print("DataFrame for Policy Type 'SPWL':")
print(spwl_df)

"""## Calculate the lapse rate"""

# got lapes  rate for term insurance (t20)
t20_lapes = t20_df.copy()
t20_lapes = t20_lapes[t20_lapes['Issue.year'] == 2001]
# t20_lapes = t20_lapes[t20_lapes['Year.of.Lapse'] == 2020]
total = t20_lapes.shape[0]

t20_lapes['year_at_lapes'] = t20_lapes['Year.of.Lapse'] - t20_lapes['Issue.year'] + 1


# Create a DataFrame with years as index
lapes_df = pd.DataFrame(index = list(range(0, 20)))
lapes_df['Year'] = 0
accumulate_lapes = 0

for year in range(1, 21):
  lapes_df.loc[year - 1, 'Year'] = year
  lapes_df.loc[year - 1, 'Number of lapes'] = t20_lapes[t20_lapes['year_at_lapes'] == year].shape[0]
  lapes_df.loc[year - 1, 'active policy sop'] = total - accumulate_lapes
  accumulate_lapes += t20_lapes[t20_lapes['year_at_lapes'] == year].shape[0]
    #
# get the distribution of the inforce data set

lapes_df['distribution'] = lapes_df['Number of lapes'] / lapes_df['active policy sop']


#### for sensitivity test, the +, - 10 % for lapes rate

lapes_df['Lapes -10%'] = lapes_df['distribution'] * 0.9
lapes_df['Lapes +10%'] = lapes_df['distribution'] * 1.1

# since the term 20 insurance would not need to pay out any payment in year = 20 so omit the last row
lapes_df = lapes_df.drop(lapes_df.index[-1])
# Increase a row for year 20 by copy the last row
lapes_df.loc[19] = lapes_df.loc[18]
#replace the year 20 with 20
lapes_df.loc[19, 'Year'] = 20
# print(lapes_df)
lapes_df



"""Basede on the given data, depands a lapes dataset"""

check_wl = spwl_df[spwl_df['Lapse.Indicator'] == 1].shape[0]
print(check_wl)
# since there is no lapes in the wholelife insurance, therefore, do not consider lapes in whle life insurance

"""##Calculate the expected claim cost for whole life policy"""

# #Calcculate Expected claim cost
# DB = deaths * death benefit
# deaths = mortality rate per 1000 * inforce(sop)/1000
# mortality rate per 1000 = mortality rate * 1000
# inforce(sop) = in force (eop) age-1 = in force (sop) -

"""## Filter data for question 1"""

#Only select customers which are not dead yet for WL (drop dead)
spwl_df_select = spwl_df[spwl_df['Issue.age']< 45].copy()
spwl_df_select
spwl_df_select = spwl_df_select[spwl_df_select['Lapse.Indicator'] != 1.0]

spwl_df_select = spwl_df_select[spwl_df_select['Death.indicator'] != 1.0]
spwl_df_select
print("number of policies for whole life used in calculation:",len(spwl_df_select))

#Only select customers which are not dead yet for T20 (drop dead and survived until the end)
#Filter out target age group
t20_df_select = t20_df[t20_df['Issue.age']< 45].copy()
t20_df_select
t20_df_select = t20_df_select[t20_df_select['Lapse.Indicator'] != 1.0]
t20_df_select = t20_df_select[t20_df_select['Death.indicator'] != 1.0]
t20_df_select
print("number of policies for T20 used in calculation:",len(t20_df_select))

"""## Calculate the Mortality saving for Whole life insurance
### Assume no lapse
"""

def calculate_total_expected_claim_cost_spwl(mortality_tb, interest_rate_table, issue_age, issue_year, face_amount, smoking_status, underwriting_class, death_indicator, year_of_death):
    # Assume maximum age is 120
    max_age = 120

    # create lapse table in python
    # data = {
    # 'Age': range(1, 121),
    # 'Lapse Rate': [0] * 120}

    # Create the DataFrame
    # lapse_rate_table_0 = pd.DataFrame(data)

    # Extract the correct mortality rate column
    mortality_column = f'{smoking_status}_{underwriting_class}_mortality'

    # Prepare a DataFrame to hold the calculations for each year
    # df_calculations = pd.DataFrame(columns=['Year', 'Mortality Rate', 'Lapse Rate', 'In Force (sop)', 'Deaths', 'Lapses', 'In Force (eop)', 'Death Benefits (eop)'])
    calculations_list = []

    # Initialize in-force policies at start of period (sop) for year 0
    in_force_sop = 1.0
    compounded_interest_rate = 1.0 # Initialize with 1 for the base year (year 0)
    total_death_benefits_sop = 0


    # Calculate the one_plus_interest_rate for each year starting from issue_year + 1
    interest_rate_df = interest_rate_table.set_index('Year')
    one_plus_interest_rates = 1 + interest_rate_df['1-yr Risk Free Annual Spot Rate']


    # Iterate over each year from issue age until max_age
    for year in range((max_age - issue_age)+1):

        age = issue_age + year #Mortality start from age +1 (first row mort and lapse empty)
        policy_year = issue_year + year

        # # Calculate one_plus_interest_rate for the current year
        # one_plus_interest_rate = one_plus_interest_rates.get(policy_year + 1, np.nan)

        # # Calculate compounded_interest_rate for the current year
        # compounded_interest_rate *= one_plus_interest_rate if year > 0 else np.nan

        # Initialize default values for the first year
        mortality_rate = None
        lapse_rate = None
        deaths = None
        lapses = None
        death_benefits_eop = None
        death_benefits_sop = None
        if year == 0:
          one_plus_interest_rate = 1
          compounded_interest_rate = 1

        #    # For years after the first year, calculate the values
        if year > 0:
          # Find the mortality rate for the given age
          mortality_rate = mortality_tb.loc[mortality_tb['Age'] == age, mortality_column].values[0] if age < mortality_tb['Age'].max() else 1

          # Find the lapse rate for the given age
          # lapse_rate = lapse_rate_table_0.loc[lapse_rate_table_0['Age'] == age, 'Lapse Rate'].values[0] if age < lapse_rate_table_0['Age'].max() else 0
          lapse_rate = 0
          # Calculate deaths and lapses
          deaths = mortality_rate * in_force_sop
          lapses = 0


          # Calculate one_plus_interest_rate for the current year
          one_plus_interest_rate = one_plus_interest_rates.get(policy_year, np.nan)

          # Calculate compounded_interest_rate for the current year
          compounded_interest_rate *= one_plus_interest_rate

          # Calculate death benefits paid out at end of period (eop)
          death_benefits_eop = deaths * face_amount if death_indicator != 1 else 0


          # Calculate death benefits (sop) using the compounded interest rate
          death_benefits_sop = death_benefits_eop / compounded_interest_rate if death_indicator != 1 else 0



        # Calculate in-force policies at end of period (eop) - this remains the same for year 0
        in_force_eop = in_force_sop - (deaths) if year > 0 else in_force_sop


        # Append the calculations for the current year to the DataFrame
        calculations_list.append({
            'Year': year,
            'Mortality Rate': mortality_rate,
            'Lapse Rate': lapse_rate,
            'In Force (sop)': in_force_sop,
            'Deaths': deaths,
            'Lapses': lapses,
            'In Force (eop)': in_force_eop,
            'One plus interest rate': one_plus_interest_rate,
            'compounded_interest_rate': compounded_interest_rate,
            'Death Benefits (eop)': death_benefits_eop,
            'Death Benefits (sop)': death_benefits_sop
            })

        # Update in-force policies at start of period (sop) for next year
        in_force_sop = in_force_eop

    # Convert the list of calculations to a DataFrame
    df_calculations = pd.DataFrame(calculations_list)

    # Sum up the total expected claim cost
    total_expected_claim_cost = df_calculations['Death Benefits (eop)'].sum().round()

    # Accumulate total death benefits sop
    total_death_benefits_sop = df_calculations['Death Benefits (sop)'].sum().round()

    # print(df_calculations.tail(10))

    #discount death benefit back to 2001
    # print(eco_df.loc[eco_df['Year'] == issue_year, 'compounded interest rate 2001'].values[0])
    discount_2001 = eco_df.loc[eco_df['Year'] == issue_year, 'compounded interest rate 2001'].values[0]
    # print(discount_2001)
    # discount_2001 = 1
    total_death_benefits_sop =total_death_benefits_sop / discount_2001



    # #Calculate the expense for this policy
    # expense_2001 = exp_df.loc[exp_df['Year'] == issue_year, 'Expense after inflation'].values[0]
    # expense_2001 = expense_2001 / discount_2001

    return total_expected_claim_cost, total_death_benefits_sop, df_calculations


# Call the function with example inputs
total_cost_eop, total_cost_sop, calculations_df = calculate_total_expected_claim_cost_spwl(
    mor_df_nop, eco_df, 41, 2001, 2000000, 'NS', 'very_low_risk', 0, None
)

print(f'Total Expected Claim Cost: {total_cost_eop} {total_cost_sop}')
calculations_df  # Show the first few rows of the DataFrame with yearly calculations

exp_df

# prompt: output calculations_df to csv

# calculations_df.to_csv("calculations_df.csv", index=False)

"""## Calculate expect claim for whole life with policy (Run)"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from tqdm.notebook import tqdm
# tqdm.pandas()

#Calculate the total mortality saving for whole life

# Define a wrapper function to apply
def wrapper_apply_policy_cost(row):
    # Extract the issue_age for the policy issue year
    issue_age = row['Issue.age']
    # print(issue_age)
    issue_year = row['Issue.year']
    # print(issue_year)
    face_amount = row['Face.amount']
    # print(face_amount)
    smoking_status = row['Smoker.Status']
    # print(smoking_status)
    underwriting_class = row['Underwriting.Class'].replace(' ', '_')
    # print(underwriting_class)
    death_indicator = row['Death.indicator']
    # print(death_indicator)
    year_of_death = row['Year.of.Death']
    # print(year_of_death)

    # Calculate the expected claim cost for the row
    return calculate_total_expected_claim_cost_spwl(mor_df_cleaned, eco_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, death_indicator, year_of_death)

    # mortality_table, lapse_rate_table, eco_df, 45, 1970, 50000, 'NS', 'low_risk', 0, None

# Apply the function to each row of the DataFrame
spwl_df_select_test = spwl_df_select.copy()

# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
spwl_df_select_test['Expected_Claim_Cost_sop_nop'] = spwl_df_select_test.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)

# Calculate the total expected claim cost with out the program
total_expected_claim_cost_withp_wl = spwl_df_select_test['Expected_Claim_Cost_sop_nop'].sum()

print(f'Total Expected Claim Cost for all policies: {total_expected_claim_cost_withp_wl}')


"""## Calculate expect claim for whole life without policy (Run)"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# tqdm.pandas()

#Calculate the total mortality saving for whole life

# Define a wrapper function to apply
def wrapper_apply_policy_cost(row):
    # Extract the issue_age for the policy issue year
    issue_age = row['Issue.age']
    # print(issue_age)
    issue_year = row['Issue.year']
    # print(issue_year)
    face_amount = row['Face.amount']
    # print(face_amount)
    smoking_status = row['Smoker.Status']
    # print(smoking_status)
    underwriting_class = row['Underwriting.Class'].replace(' ', '_')
    # print(underwriting_class)
    death_indicator = row['Death.indicator']
    # print(death_indicator)
    year_of_death = row['Year.of.Death']
    # print(year_of_death)

    # Calculate the expected claim cost for the row
    return calculate_total_expected_claim_cost_spwl(mor_df_nop, eco_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, death_indicator, year_of_death)

    # mortality_table, lapse_rate_table, eco_df, 45, 1970, 50000, 'NS', 'low_risk', 0, None

# Apply the function to each row of the DataFrame
spwl_df_select_test = spwl_df_select.copy()

# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
spwl_df_select_test['Expected_Claim_Cost_sop_nop'] = spwl_df_select_test.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)

# Calculate the total expected claim cost with out the program
total_expected_claim_cost_nop_wl = spwl_df_select_test['Expected_Claim_Cost_sop_nop'].sum()

print(f'Total Expected Claim Cost for all policies: {total_expected_claim_cost_nop_wl}')

#############################RESULT FOR MORTALITY SAVING OF WL#####################################################
print("MORTALITY SAVING OF WL in past 20 years",total_expected_claim_cost_nop_wl - total_expected_claim_cost_withp_wl)


"""## Formula for Calculate the mortality saving for T20 Policy"""

def calculate_total_expected_claim_cost_t20(mortality_table, lapse_rate_table, interest_rate_table, issue_age, issue_year, face_amount, smoking_status, underwriting_class, death_indicator):
    # Assume maximum age is 120
    max_age = 120

    #The policy length is 20
    term_length = 20

    # Extract the correct mortality rate column
    mortality_column = f'{smoking_status}_{underwriting_class}_mortality'

    # Prepare a DataFrame to hold the calculations for each year
    # df_calculations = pd.DataFrame(columns=['Year', 'Mortality Rate', 'Lapse Rate', 'In Force (sop)', 'Deaths', 'Lapses', 'In Force (eop)', 'Death Benefits (eop)'])
    calculations_list = []

    # Initialize in-force policies at start of period (sop) for year 0
    in_force_sop = 1.0
    compounded_interest_rate = 1.0 # Initialize with 1 for the base year (year 0)
    total_death_benefits_sop = 0

    # Calculate the one_plus_interest_rate for each year starting from issue_year + 1
    interest_rate_df = interest_rate_table.set_index('Year')
    one_plus_interest_rates = 1 + interest_rate_df['1-yr Risk Free Annual Spot Rate']


    # Iterate over each year from issue age until max_age
    for year in range(term_length+1):

        age = issue_age + year #Mortality start from age +1 (first row mort and lapse empty)
        policy_year = issue_year + year

        # # Calculate one_plus_interest_rate for the current year
        # one_plus_interest_rate = one_plus_interest_rates.get(policy_year + 1, np.nan)

        # # Calculate compounded_interest_rate for the current year
        # compounded_interest_rate *= one_plus_interest_rate if year > 0 else np.nan

        # Initialize default values for the first year
        mortality_rate = None
        lapse_rate = None
        deaths = None
        lapses = None
        death_benefits_eop = None
        death_benefits_sop = None
        if year == 0:
          one_plus_interest_rate = 1
          compounded_interest_rate = 1

        #    # For years after the first year, calculate the values
        if year > 0:
          # Find the mortality rate for the given age
          mortality_rate = mortality_table.loc[mortality_table['Age'] == age, mortality_column].values[0] if age < mortality_table['Age'].max() else 1

          # Find the lapse rate for the given age
          # lapse_rate = lapse_rate_table.loc[lapse_rate_table['Age'] == age, 'Lapse Rate'].values[0] if age < lapse_rate_table['Age'].max() else 0
          lapse_rate = lapes_df.loc[lapes_df['Year'] == year, 'distribution'].values[0] if year <= lapes_df['Year'].max() else 0

          # Calculate deaths and lapses
          deaths = mortality_rate * in_force_sop
          lapses = min(lapse_rate * in_force_sop, in_force_sop - deaths)


          # Calculate one_plus_interest_rate for the current year
          one_plus_interest_rate = one_plus_interest_rates.get(policy_year, np.nan)

          # Calculate compounded_interest_rate for the current year
          compounded_interest_rate *= one_plus_interest_rate

          # Calculate death benefits paid out at end of period (eop)
          death_benefits_eop = deaths * face_amount if death_indicator != 1 else 0


          # Calculate death benefits (sop) using the compounded interest rate
          death_benefits_sop = death_benefits_eop / compounded_interest_rate if death_indicator != 1 else 0



        # Calculate in-force policies at end of period (eop) - this remains the same for year 0
        in_force_eop = in_force_sop - (deaths + lapses) if year > 0 else in_force_sop


        # Append the calculations for the current year to the DataFrame
        calculations_list.append({
            'Year': year,
            'Mortality Rate': mortality_rate,
            'Lapse Rate': lapse_rate,
            'In Force (sop)': in_force_sop,
            'Deaths': deaths,
            'Lapses': lapses,
            'In Force (eop)': in_force_eop,
            'One plus interest rate': one_plus_interest_rate,
            'compounded_interest_rate': compounded_interest_rate,
            'Death Benefits (eop)': death_benefits_eop,
            'Death Benefits (sop)': death_benefits_sop,
            'current year': policy_year
            })

        # Update in-force policies at start of period (sop) for next year
        in_force_sop = in_force_eop

    # Convert the list of calculations to a DataFrame
    df_calculations = pd.DataFrame(calculations_list)

    # Sum up the total expected claim cost
    total_expected_claim_cost = df_calculations['Death Benefits (eop)'].sum().round()

    # Accumulate total death benefits sop
    total_death_benefits_sop = df_calculations['Death Benefits (sop)'].sum().round()
    # print('Death Benefits (sop)', df_calculations['Death Benefits (sop)'].sum())


    #discount death benefit back to 2001
    discount_2001 = eco_df.loc[eco_df['Year'] == issue_year, 'compounded interest rate 2001'].values[0]
    # print(discount_2001)

    total_death_benefits_sop =total_death_benefits_sop / discount_2001

    return total_expected_claim_cost, total_death_benefits_sop, df_calculations

# Example usage (you need to replace these with your actual data):
# mortality_table = pd.DataFrame([...])  # Replace with your actual mortality table data
# lapse_rate_table = pd.DataFrame([...])  # Replace with your actual lapse rate table data

mortality_table = mor_df_cleaned
lapse_rate_table = lapes_df

# Call the function with example inputs
total_cost_eop, total_cost_sop, calculations_df = calculate_total_expected_claim_cost_t20(
    mortality_table, lapse_rate_table, eco_df, 41, 2001, 2000000, 'NS', 'low_risk', 0
)
print(f'Total Expected Claim Cost: {total_cost_eop} {total_cost_sop}')
calculations_df  # Show the first few rows of the DataFrame with yearly calculations

"""## (Completed) T20 expected Claim with program"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from tqdm.notebook import tqdm
# tqdm.pandas()
# 
#Calculate the total mortality saving for whole life

# Define a wrapper function to apply
def wrapper_apply_policy_cost(row):
    # Extract the issue_age for the policy issue year
    issue_age = row['Issue.age']
    # print(issue_age)
    issue_year = row['Issue.year']
    # print(issue_year)
    face_amount = row['Face.amount']
    # print(face_amount)
    smoking_status = row['Smoker.Status']
    # print(smoking_status)
    underwriting_class = row['Underwriting.Class'].replace(' ', '_')
    # print(underwriting_class)
    death_indicator = row['Death.indicator']
    # print(death_indicator)
    year_of_death = row['Year.of.Death']
    # print(year_of_death)

    # Calculate the expected claim cost for the row
    return calculate_total_expected_claim_cost_t20(mor_df_cleaned, lapes_df, eco_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, death_indicator)

    # mortality_table, lapse_rate_table, eco_df, 45, 1970, 50000, 'NS', 'low_risk', 0, None
# Apply the function to each row of the DataFrame
t20_df_select_test = t20_df_select.copy()
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
t20_df_select_test['Expected_Claim_Cost_sop'] = t20_df_select_test.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)

# Calculate the total expected claim cost
total_expected_claim_cost_withp_t20 = t20_df_select_test['Expected_Claim_Cost_sop'].sum()

print(f'Total Expected Claim Cost for all policies: {total_expected_claim_cost_withp_t20}')



"""## (Completed) T20 expected Claim without program"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from tqdm.notebook import tqdm
# tqdm.pandas()
# 
#Calculate the total mortality saving for whole life

# Define a wrapper function to apply
def wrapper_apply_policy_cost(row):
    # Extract the issue_age for the policy issue year
    issue_age = row['Issue.age']
    # print(issue_age)
    issue_year = row['Issue.year']
    # print(issue_year)
    face_amount = row['Face.amount']
    # print(face_amount)
    smoking_status = row['Smoker.Status']
    # print(smoking_status)
    underwriting_class = row['Underwriting.Class'].replace(' ', '_')
    # print(underwriting_class)
    death_indicator = row['Death.indicator']
    # print(death_indicator)
    year_of_death = row['Year.of.Death']
    # print(year_of_death)

    # Calculate the expected claim cost for the row
    return calculate_total_expected_claim_cost_t20(mor_df_nop, lapes_df, eco_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, death_indicator)

    # mortality_table, lapse_rate_table, eco_df, 45, 1970, 50000, 'NS', 'low_risk', 0, None
# Apply the function to each row of the DataFrame
spwl_df_select_test = t20_df_select.copy()
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
spwl_df_select_test['Expected_Claim_Cost_sop'] = spwl_df_select_test.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)

# Calculate the total expected claim cost
total_expected_claim_cost_nop_20 = spwl_df_select_test['Expected_Claim_Cost_sop'].sum()

print(f'Total Expected Claim Cost for all policies: {total_expected_claim_cost_nop_20}')

#############################RESULT FOR MORTALITY SAVING OF WL#####################################################
print(f"MORTALITY SAVING OF WL in past 20 years {total_expected_claim_cost_nop_20} - {total_expected_claim_cost_withp_t20} = {total_expected_claim_cost_nop_20 - total_expected_claim_cost_withp_t20}")


"""# Section 2 Economic Cost

## Formula for Calculate expected claim cost for projection -- T20
"""

#MUST filter out all the policy are still in force at 2024!
def calculate_total_expected_claim_cost_t20_projection(mortality_table, lapes_df, interest_rate_table, issue_age, issue_year, face_amount, smoking_status, underwriting_class, death_indicator, projection_length):
    # Assume maximum age is 120
    max_age = 120

    #The policy length is 20
    term_length = 20

    # Extract the correct mortality rate column
    mortality_column = f'{smoking_status}_{underwriting_class}_mortality'

    # Prepare a DataFrame to hold the calculations for each year
    # df_calculations = pd.DataFrame(columns=['Year', 'Mortality Rate', 'Lapse Rate', 'In Force (sop)', 'Deaths', 'Lapses', 'In Force (eop)', 'Death Benefits (eop)'])
    calculations_list = []

    # Initialize in-force policies at start of period (sop) for year 0
    in_force_sop = 1.0
    compounded_interest_rate = 1.0 # Initialize with 1 for the base year (year 0)
    total_death_benefits_sop = 0

    # Calculate the one_plus_interest_rate for each year starting from issue_year + 1
    interest_rate_df = interest_rate_table.set_index('Year')
    one_plus_interest_rates = 1 + interest_rate_df['1-yr Risk Free Annual Spot Rate']


    # Iterate over each year from issue age until max_age
    for year in range(term_length + 1):

        age = issue_age + year #Mortality start from age +1 (first row mort and lapse empty)
        policy_year = issue_year + year
        # print(policy_year)

        if policy_year > (2024 + projection_length):
          break
        # # Calculate one_plus_interest_rate for the current year
        # one_plus_interest_rate = one_plus_interest_rates.get(policy_year + 1, np.nan)

        # # Calculate compounded_interest_rate for the current year
        # compounded_interest_rate *= one_plus_interest_rate if year > 0 else np.nan

        # Initialize default values for the first year
        mortality_rate = None
        lapse_rate = None
        deaths = None
        lapses = None
        death_benefits_eop = None
        death_benefits_sop = None
        if year == 0:
          one_plus_interest_rate = 1
          compounded_interest_rate = 1

        #    # For years after the first year, calculate the values
        if year > 0:
          # Find the mortality rate for the given age
          mortality_rate = mortality_table.loc[mortality_table['Age'] == age, mortality_column].values[0] if age < mortality_table['Age'].max() else 1

          # Find the lapse rate for the given age
          # lapse_rate = lapse_rate_table.loc[lapse_rate_table['Age'] == age, 'Lapse Rate'].values[0] if age < lapse_rate_table['Age'].max() else 0
          lapse_rate = lapes_df.loc[lapes_df['Year'] == year, 'distribution'].values[0] if year <= lapes_df['Year'].max() else 0

          # Calculate deaths and lapses
          deaths = mortality_rate * in_force_sop
          lapses = min(lapse_rate * in_force_sop, in_force_sop - deaths)


          # Calculate one_plus_interest_rate for the current year
          one_plus_interest_rate = one_plus_interest_rates.get(policy_year, np.nan)

          # Calculate compounded_interest_rate for the current year
          compounded_interest_rate *= one_plus_interest_rate

          # Calculate death benefits paid out at end of period (eop)
          death_benefits_eop = deaths * face_amount if death_indicator != 1 else 0


          # Calculate death benefits (sop) using the compounded interest rate
          death_benefits_sop = death_benefits_eop / compounded_interest_rate if death_indicator != 1 else 0



        # Calculate in-force policies at end of period (eop) - this remains the same for year 0
        in_force_eop = in_force_sop - (deaths + lapses) if year > 0 else in_force_sop


        # Append the calculations for the current year to the DataFrame
        calculations_list.append({
            'Year': year,
            'Mortality Rate': mortality_rate,
            'Lapse Rate': lapse_rate,
            'In Force (sop)': in_force_sop,
            'Deaths': deaths,
            'Lapses': lapses,
            'In Force (eop)': in_force_eop,
            'One plus interest rate': one_plus_interest_rate,
            'compounded_interest_rate': compounded_interest_rate,
            'Death Benefits (eop)': death_benefits_eop,
            'Death Benefits (sop)': death_benefits_sop,
            'current year': policy_year
            })

        # Update in-force policies at start of period (sop) for next year
        in_force_sop = in_force_eop

    # Convert the list of calculations to a DataFrame
    df_calculations = pd.DataFrame(calculations_list)

    # print(df_calculations)

    # Sum up the total expected claim cost
    # total_expected_claim_cost = df_calculations['Death Benefits (eop)'].sum().round()

    # Accumulate total death benefits sop
    # total_death_benefits_sop = df_calculations['Death Benefits (sop)'].sum().round()

    # print(df_calculations.tail(10))
    filtered_df_5 = df_calculations[(df_calculations['current year'] >= 2024) & (df_calculations['current year'] <= (2024 + 5))]

    filtered_df_20 = df_calculations[(df_calculations['current year'] >= 2024) & (df_calculations['current year'] <= (2024 + projection_length))]

    # Sum up the 'count' column of the filtered DataFrame
    total_count_projection_5 = filtered_df_5['Death Benefits (sop)'].sum()
    # Sum up the 'count' column of the filtered DataFrame
    total_count_projection_20 = filtered_df_20['Death Benefits (sop)'].sum()

    #discount death benefit back to 2024
    discount_2024 = eco_df.loc[eco_df['Year'] == issue_year, 'compounded interest rate 2024'].values[0]
    # print(discount_2024)
    total_count_projection_5 =total_count_projection_5 / discount_2024
    total_count_projection_20 =total_count_projection_20 / discount_2024


    #Calculate the expense for this policy
    expense_2024 = exp_df.loc[exp_df['Year'] == issue_year, 'Expense after inflation'].values[0]
    expense_2024 = expense_2024 / discount_2024
    # print("expense_2024", expense_2024)

    # print("policy", df_calculations['Death Benefits (sop)'])
    return total_count_projection_5,total_count_projection_20, expense_2024, filtered_df_20

# Example usage (you need to replace these with your actual data):
# mortality_table = pd.DataFrame([...])  # Replace with your actual mortality table data
# lapse_rate_table = pd.DataFrame([...])  # Replace with your actual lapse rate table data

mortality_table = mor_df_cleaned
lapse_rate_table = lapes_df

# Call the function with example inputs
total_5_sop,total_20_sop, expense_this, calculations_df = calculate_total_expected_claim_cost_t20_projection(
    mortality_table, lapse_rate_table, eco_df, 45, 2043, 100000, 'NS', 'low_risk', 0, 20
)
print(f'Total Expected Claim Cost for projection in 5 yrs: {total_5_sop} ')
print(f'Total Expected Claim Cost for projection in 20 yrs: {total_20_sop} ')
print(f'Total expense for projection in 20 yrs discounted to 2024: {expense_this} ')
calculations_df  # Show the first few rows of the DataFrame with yearly calculations

#data limitation
#1.lapse rate too small, all around 1%
#2. lapse rate for last year is too high, which includes all the people who survived until the end of the policy
#3. the data range is only up to 2023.
#whole life-no lapse rate,no surrender people

exp_df

eco_df

"""## Formula for calculate the expected claim for projection -- whole life"""

#MUST filter out all the policy are still in force at 2024!

def calculate_total_expected_claim_cost_spwl_projection(mortality_tb, interest_rate_table, issue_age, issue_year, face_amount, smoking_status, underwriting_class, death_indicator, projection_length):
    # Assume maximum age is 120
    max_age = 120

    # create lapse table in python
    # data = {
    # 'Age': range(1, 121),
    # 'Lapse Rate': [0] * 120}

    # Create the DataFrame
    # lapse_rate_table_0 = pd.DataFrame(data)

    # Extract the correct mortality rate column
    mortality_column = f'{smoking_status}_{underwriting_class}_mortality'

    # Prepare a DataFrame to hold the calculations for each year
    # df_calculations = pd.DataFrame(columns=['Year', 'Mortality Rate', 'Lapse Rate', 'In Force (sop)', 'Deaths', 'Lapses', 'In Force (eop)', 'Death Benefits (eop)'])
    calculations_list = []

    # Initialize in-force policies at start of period (sop) for year 0
    in_force_sop = 1.0
    compounded_interest_rate = 1.0 # Initialize with 1 for the base year (year 0)
    total_death_benefits_sop = 0


    # Calculate the one_plus_interest_rate for each year starting from issue_year + 1
    interest_rate_df = interest_rate_table.set_index('Year')
    one_plus_interest_rates = 1 + interest_rate_df['1-yr Risk Free Annual Spot Rate']


    # Iterate over each year from issue age until max_age
    for year in range((max_age - issue_age)+1):

        age = issue_age + year #Mortality start from age +1 (first row mort and lapse empty)
        policy_year = issue_year + year

        if policy_year > (2024 + projection_length):
          break
        # # Calculate one_plus_interest_rate for the current year
        # one_plus_interest_rate = one_plus_interest_rates.get(policy_year + 1, np.nan)

        # # Calculate compounded_interest_rate for the current year
        # compounded_interest_rate *= one_plus_interest_rate if year > 0 else np.nan

        # Initialize default values for the first year
        mortality_rate = None
        lapse_rate = None
        deaths = None
        lapses = None
        death_benefits_eop = None
        death_benefits_sop = None
        if year == 0:
          one_plus_interest_rate = 1
          compounded_interest_rate = 1

        #    # For years after the first year, calculate the values
        if year > 0:
          # Find the mortality rate for the given age
          mortality_rate = mortality_tb.loc[mortality_tb['Age'] == age, mortality_column].values[0] if age < mortality_tb['Age'].max() else 1

          # Find the lapse rate for the given age
          # lapse_rate = lapse_rate_table_0.loc[lapse_rate_table_0['Age'] == age, 'Lapse Rate'].values[0] if age < lapse_rate_table_0['Age'].max() else 0
          lapse_rate = 0
          # Calculate deaths and lapses
          deaths = mortality_rate * in_force_sop
          lapses = 0


          # Calculate one_plus_interest_rate for the current year
          one_plus_interest_rate = one_plus_interest_rates.get(policy_year, np.nan)

          # Calculate compounded_interest_rate for the current year
          compounded_interest_rate *= one_plus_interest_rate

          # Calculate death benefits paid out at end of period (eop)
          death_benefits_eop = deaths * face_amount if death_indicator != 1 else 0


          # Calculate death benefits (sop) using the compounded interest rate
          death_benefits_sop = death_benefits_eop / compounded_interest_rate if death_indicator != 1 else 0



        # Calculate in-force policies at end of period (eop) - this remains the same for year 0
        in_force_eop = in_force_sop - (deaths) if year > 0 else in_force_sop


        # Append the calculations for the current year to the DataFrame
        calculations_list.append({
            'Year': year,
            'Mortality Rate': mortality_rate,
            'Lapse Rate': lapse_rate,
            'In Force (sop)': in_force_sop,
            'Deaths': deaths,
            'Lapses': lapses,
            'In Force (eop)': in_force_eop,
            'One plus interest rate': one_plus_interest_rate,
            'compounded_interest_rate': compounded_interest_rate,
            'Death Benefits (eop)': death_benefits_eop,
            'Death Benefits (sop)': death_benefits_sop,
            'current year': policy_year
            })

        # Update in-force policies at start of period (sop) for next year
        in_force_sop = in_force_eop

    # Convert the list of calculations to a DataFrame
    df_calculations = pd.DataFrame(calculations_list)

    # print(df_calculations)
    # Sum up the total expected claim cost
    total_expected_claim_cost = df_calculations['Death Benefits (eop)'].sum().round()

    # Accumulate total death benefits sop
    total_death_benefits_sop = df_calculations['Death Benefits (sop)'].sum().round()

    # print(df_calculations.tail(10))
    filtered_df_5 = df_calculations[(df_calculations['current year'] >= 2024) & (df_calculations['current year'] <= (2024 + 5))]

    filtered_df_20 = df_calculations[(df_calculations['current year'] >= 2024) & (df_calculations['current year'] <= (2024 + projection_length))]

    # Sum up the 'count' column of the filtered DataFrame
    total_count_projection_5 = filtered_df_5['Death Benefits (sop)'].sum()
    # Sum up the 'count' column of the filtered DataFrame
    total_count_projection_20 = filtered_df_20['Death Benefits (sop)'].sum()

    #discount death benefit back to 2024
    discount_2024 = eco_df.loc[eco_df['Year'] == issue_year, 'compounded interest rate 2024'].values[0]
    # print(discount_2024)
    total_count_projection_5 =total_count_projection_5 / discount_2024
    total_count_projection_20 =total_count_projection_20 / discount_2024


    #Calculate the expense for this policy
    expense_2024 = exp_df.loc[exp_df['Year'] == issue_year, 'Expense after inflation'].values[0]
    expense_2024 = expense_2024 / discount_2024

    # print("policy", df_calculations['Death Benefits (sop)'])
    return total_count_projection_5,total_count_projection_20, expense_2024, filtered_df_20



# Call the function with example inputs
total_cost_eop_5, total_cost_eop_20, expense_t20, calculations_df = calculate_total_expected_claim_cost_spwl_projection(
    mor_df_nop, eco_df, 41, 2043, 2000000, 'NS', 'very_low_risk', 0, 20)

print(f'Total Expected Claim Cost in 5 years: {total_cost_eop_5}')
print(f'Total Expected Claim Cost in 20 years: {total_cost_eop_20}')
print(f'Total Expense in 2024: {expense_t20}')
calculations_df  # Show the first few rows of the DataFrame with yearly calculations

"""## Create new projection dataset"""

#Create projection dataset
#1. Create a new dataset with the same columns as the original dataset
new_df = inforce_df.copy()

#2. assume our policy will only implement to the people which sign up start from 2024
#Assume the projection starts from 2024. Create projection data for 2024-2046
new_df['Issue.year'] = new_df['Issue.year'] + 23
new_df['Year.of.Death'] = new_df['Year.of.Death'] + 23
new_df['Year.of.Lapse'] = new_df['Year.of.Lapse'] + 23
#3. Our proposed time frame: 5 years 2024-2029, 20 years 2024-2044
#Drop the data after 2044
new_df = new_df[new_df['Issue.year'] <= 2043]

#4. As we want to calculate the mortality saving for the po
new_df

#Only select customers which are not dead yet for WL (drop dead)
new_df_select = new_df[new_df['Issue.age']< 45].copy()
new_df_select = new_df_select[new_df_select['Lapse.Indicator'] != 1.0]
new_df_select = new_df_select[new_df_select['Death.indicator'] != 1.0]
new_df_select

# Get unique policy types
unique_policy_types_proj = new_df_select['Policy.type'].unique()

# Create a dictionary to store DataFrames for each policy type
policy_type_data_proj = {}

# Iterate over unique policy types
for policy_type in unique_policy_types_proj:
    # Filter the DataFrame for the current policy type
    policy_type_df_proj = new_df_select[new_df_select['Policy.type'] == policy_type]

    # Store the filtered DataFrame in the dictionary
    policy_type_data_proj[policy_type] = policy_type_df_proj

# Now policy_type_data dictionary contains separate DataFrames for each policy type
# You can access each DataFrame using its corresponding policy type as the key

# Example usage:
# Access DataFrame for policy type 'T20'
t20_df_proj = policy_type_data_proj['T20']
print("DataFrame for Policy Type 'T20':")
print(len(t20_df_proj))

# Access DataFrame for policy type 'SPWL'
SPWL_df_proj = policy_type_data_proj['SPWL']
print("DataFrame for Policy Type 'SPWL':")
print(len(SPWL_df_proj))
t20_df_proj
SPWL_df_proj

SPWL_df_proj

"""## (RUN) 2. Calculate the economy value for projection -- T20"""

sen_result_df = pd.DataFrame(index=range(5))

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from tqdm.notebook import tqdm
# tqdm.pandas()

#Calculate the total mortality saving for whole life with projection

# Define a wrapper function to apply
def wrapper_apply_policy_cost_20(row,mort_table, cus_lapes_df, cus_eco_df):
    # Extract the issue_age for the policy issue year
    issue_age = row['Issue.age']
    # print(issue_age)
    issue_year = row['Issue.year']
    # print(issue_year)
    face_amount = row['Face.amount']
    # print(face_amount)
    smoking_status = row['Smoker.Status']
    # print(smoking_status)
    underwriting_class = row['Underwriting.Class'].replace(' ', '_')
    # print(underwriting_class)
    death_indicator = row['Death.indicator']
    # print(death_indicator)
    year_of_death = row['Year.of.Death']
    # print(year_of_death)

    # Calculate the expected claim cost for the row
    return calculate_total_expected_claim_cost_t20_projection(mort_table, cus_lapes_df, cus_eco_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, death_indicator, 20)

def wrapper_apply_policy_cost_spwl_projection(row,mort_table, cus_eco_df):
    # Extract the issue_age for the policy issue year
    issue_age = row['Issue.age']
    # print(issue_age)
    issue_year = row['Issue.year']
    # print(issue_year)
    face_amount = row['Face.amount']
    # print(face_amount)
    smoking_status = row['Smoker.Status']
    # print(smoking_status)
    underwriting_class = row['Underwriting.Class'].replace(' ', '_')
    # print(underwriting_class)
    death_indicator = row['Death.indicator']
    # print(death_indicator)
    year_of_death = row['Year.of.Death']
    # print(year_of_death)

    # Calculate the expected claim cost for the row
    return calculate_total_expected_claim_cost_spwl_projection(mort_table, cus_eco_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, death_indicator, 20)

# Apply the function to each row of the DataFrame

def run_whole_data(org_inforce_df,mort_table, lapse_rate_df, int_table, fun_type):
    t20_df_select_test_pj_wp = org_inforce_df.head(100). copy()
    if fun_type == 't20':
        results = t20_df_select_test_pj_wp.apply(lambda x: pd.Series(wrapper_apply_policy_cost_20(x,mort_table, lapse_rate_df, int_table)[:3]), axis=1)
    elif fun_type == 'wl':
        results = t20_df_select_test_pj_wp.apply(lambda x: pd.Series(wrapper_apply_policy_cost_spwl_projection(x,mort_table, int_table)[:3]), axis=1)
    # Assign the results to two new columns in your DataFrame
    t20_df_select_test_pj_wp[['Expected_Claim_Cost_sop_5', 'Expected_Claim_Cost_sop_20', 'Expense2024']] = results

    # Calculate the total expected claim cost
    total_expected_claim_cost_withp_t20_5 = t20_df_select_test_pj_wp['Expected_Claim_Cost_sop_5'].sum()
    total_expected_claim_cost_withp_t20_20 = t20_df_select_test_pj_wp['Expected_Claim_Cost_sop_20'].sum()
    total_expense_20 = t20_df_select_test_pj_wp['Expense2024'].sum()

    if fun_type == 't20':
        print(f'Total Expected Claim Cost for all policies for t20 years:', {total_expected_claim_cost_withp_t20_5}, {total_expected_claim_cost_withp_t20_20},'Total Expected Expense', {total_expense_20})
    elif fun_type == 'wl':
        print(f'Total Expected Claim Cost for all policies for whole life:', {total_expected_claim_cost_withp_t20_5}, {total_expected_claim_cost_withp_t20_20},'Total Expected Expense', {total_expense_20})
    return total_expected_claim_cost_withp_t20_5, total_expected_claim_cost_withp_t20_20, total_expense_20, t20_df_select_test_pj_wp



# Run with the project
total_expected_claim_cost_withp_t20_5, total_expected_claim_cost_withp_t20_20, total_expense_20, t20_df_select_test_pj_wp = run_whole_data(t20_df_proj, mor_df_cleaned, lapes_df, eco_df, 't20')

#Run without the project
total_expected_claim_cost_nop_t20_5, total_expected_claim_cost_nop_t20_20, total_expense_20_nop, t20_df_select_test_pj_nop = run_whole_data(t20_df_proj, mor_df_nop, lapes_df, eco_df, 't20')
Total_mort_saving_proj_t20_5 = total_expected_claim_cost_nop_t20_5 - total_expected_claim_cost_withp_t20_5
Total_mort_saving_proj_t20_20 = total_expected_claim_cost_nop_t20_20 - total_expected_claim_cost_withp_t20_20
print(f'Total mortality Saving for T20 in 5 years: {total_expected_claim_cost_nop_t20_5} - {total_expected_claim_cost_withp_t20_5} = {Total_mort_saving_proj_t20_5}, Total expense: {total_expense_20}, Total profit:, {Total_mort_saving_proj_t20_5 - total_expense_20_nop}')
print(f'Total mortality Saving for T20 in 20 years: {total_expected_claim_cost_nop_t20_20} - {total_expected_claim_cost_withp_t20_20} = {Total_mort_saving_proj_t20_20}, Total expense: {total_expense_20}, Total profit:, {Total_mort_saving_proj_t20_20 - total_expense_20_nop}')

sen_result_df.loc[0, 'Type'] = 'T20'  # Assign 100 to the first row
sen_result_df.loc[1, 'Type'] = 'WL'  # Assign 500 to the fifth row
sen_result_df.loc[0, 'Total Profit WP 5'] = Total_mort_saving_proj_t20_5 - total_expense_20_nop  # Assign 100 to the first row
sen_result_df.loc[0, 'Total Profit WP 20'] = Total_mort_saving_proj_t20_20 - total_expense_20_nop  # Assign 500 to the fifth row
sen_result_df

"""## (RUN) 2. Calculate the economic value for projection -- whole life policy"""

# Run with the project
total_expected_claim_cost_withp_wl_5, total_expected_claim_cost_withp_wl_20, total_expense_20_wl, wl_df_select_test_pj_wp = run_whole_data(SPWL_df_proj, mor_df_cleaned, lapes_df, eco_df, 'wl')

#Run without the project
total_expected_claim_cost_nop_wl_5, total_expected_claim_cost_nop_wl_20, total_expense_20_nop_wl, wl_df_select_test_pj_nop = run_whole_data(SPWL_df_proj, mor_df_nop, lapes_df, eco_df, 'wl')
Total_mort_saving_proj_wl_5 = total_expected_claim_cost_nop_wl_5 - total_expected_claim_cost_withp_wl_5
Total_mort_saving_proj_wl_20 = total_expected_claim_cost_nop_wl_20 - total_expected_claim_cost_withp_wl_20

print(f'Total mortality Saving for WL in 5 years: {total_expected_claim_cost_nop_wl_5} - {total_expected_claim_cost_withp_wl_5} = {Total_mort_saving_proj_wl_5}, Total expense: {total_expense_20_wl}, Total profit:, {Total_mort_saving_proj_wl_5 - total_expense_20_nop_wl}')
print(f'Total mortality Saving for WL in 20 years: {total_expected_claim_cost_nop_wl_20} - {total_expected_claim_cost_withp_wl_20} = {Total_mort_saving_proj_wl_20}, Total expense: {total_expense_20_wl}, Total profit:, {Total_mort_saving_proj_wl_20 - total_expense_20_nop_wl}')



sen_result_df.loc[1, 'Total Profit WP 5'] = Total_mort_saving_proj_wl_5 - total_expense_20_nop_wl
sen_result_df.loc[1, 'Total Profit WP 20'] = Total_mort_saving_proj_wl_20 - total_expense_20_nop_wl
sen_result_df

wl_df_select_test_pj_wp

# t20_df_select_test_pj_wp.to_csv('t20_df_select_test_pj_wp.csv')
# wl_df_select_test_pj_wp.to_csv('wl_df_select_test_pj_wp.csv')

"""# Section 3 Sensitivity Testing

## Function for sensitivity test

## 3.1 Mortality Rate Testing
"""

# Run with the project for t20 with decm
mc_withp_t20_5_decm, mc_withp_t20_20_decm, total_expense_20_decm, t20_pj_wp_decm = run_whole_data(t20_df_proj, mor_df_dec10, lapes_df, eco_df, 't20')

#Run without the project for t20 with decm
mc_nop_t20_5_decm_np, mc_nop_t20_20_decm_np, total_expense_20_decm_np, t20_pj_wp_decm_np = run_whole_data(t20_df_proj, mor_df_dec10_np, lapes_df, eco_df, 't20')

Total_mort_saving_proj_t20_5_dec = mc_nop_t20_5_decm_np - mc_withp_t20_5_decm
Total_mort_saving_proj_t20_20_dec = mc_nop_t20_20_decm_np - mc_withp_t20_20_decm
print(f'Total mortality Saving for T20 in 5 years with dec m: {mc_nop_t20_5_decm_np} - {mc_withp_t20_5_decm} = {Total_mort_saving_proj_t20_5_dec}, Total expense: {total_expense_20_decm}, Total profit:, {Total_mort_saving_proj_t20_5_dec - total_expense_20_decm}')
print(f'Total mortality Saving for T20 in 20 years with dec m: {mc_nop_t20_20_decm_np} - {mc_withp_t20_20_decm} = {Total_mort_saving_proj_t20_20_dec}, Total expense: {total_expense_20_decm}, Total profit:, {Total_mort_saving_proj_t20_20_dec - total_expense_20_decm_np}')


sen_result_df.loc[0, 'Total Profit DECM 5'] = Total_mort_saving_proj_t20_5_dec - total_expense_20_decm
sen_result_df.loc[0, 'Total Profit DECM 20'] = Total_mort_saving_proj_t20_20_dec - total_expense_20_decm



# Run with the project for whole life with decm
# Run with the project for wl with decm
mc_withp_wl_5_decm, mc_withp_wl_20_decm, total_expense_20_decm_wl, wl_df_dec_pj_wp = run_whole_data(SPWL_df_proj, mor_df_dec10, lapes_df, eco_df, 'wl')
#Run without the project for wl with decm
mc_nop_wl_5_decm_np, mc_nop_wl_20_decm_np, total_expense_20_decm_np_wl, wl_df_dec_pj_wp_nop = run_whole_data(SPWL_df_proj, mor_df_dec10_np, lapes_df, eco_df, 'wl')

Total_mort_saving_proj_wl_5_dec = mc_nop_wl_5_decm_np - mc_withp_wl_5_decm
Total_mort_saving_proj_wl_20_dec = mc_nop_wl_20_decm_np - mc_withp_wl_20_decm
print(f'Total mortality Saving for WL in 5 years with dec m: {mc_nop_wl_5_decm_np} - {mc_withp_wl_5_decm} = {Total_mort_saving_proj_wl_5_dec}, Total expense: {total_expense_20_decm_wl}, Total profit:, {Total_mort_saving_proj_wl_5_dec - total_expense_20_decm_wl}')
print(f'Total mortality Saving for WL in 20 years with dec m: {mc_nop_wl_20_decm_np} - {mc_withp_wl_20_decm} = {Total_mort_saving_proj_wl_20_dec}, Total expense: {total_expense_20_decm_wl}, Total profit:, {Total_mort_saving_proj_wl_20_dec - total_expense_20_decm_wl}')

sen_result_df.loc[1, 'Total Profit DECM 5'] = Total_mort_saving_proj_wl_5_dec - total_expense_20_decm_wl
sen_result_df.loc[1, 'Total Profit DECM 20'] = Total_mort_saving_proj_wl_20_dec - total_expense_20_decm_wl

sen_result_df

# Run with the project for t20 with incm
mc_withp_t20_5_incm, mc_withp_t20_20_incm, total_expense_20_incm, t20_pj_wp_incm = run_whole_data(t20_df_proj, mor_df_inc10, lapes_df, eco_df, 't20')

#Run without the project for t20 with incm
mc_nop_t20_5_incm_np, mc_nop_t20_20_incm_np, total_expense_20_incm_np, t20_pj_wp_incm_np = run_whole_data(t20_df_proj, mor_df_inc10_np, lapes_df, eco_df, 't20')

Total_mort_saving_proj_t20_5_inc = mc_nop_t20_5_incm_np - mc_withp_t20_5_incm
Total_mort_saving_proj_t20_20_inc = mc_nop_t20_20_incm_np - mc_withp_t20_20_incm
print(f'Total mortality Saving for T20 in 5 years with inc m: {mc_nop_t20_5_incm_np} - {mc_withp_t20_5_incm} = {Total_mort_saving_proj_t20_5_inc}, Total expense: {total_expense_20_incm}, Total profit:, {Total_mort_saving_proj_t20_5_inc - total_expense_20_incm}')
print(f'Total mortality Saving for T20 in 20 years with inc m: {mc_nop_t20_20_incm_np} - {mc_withp_t20_20_incm} = {Total_mort_saving_proj_t20_20_inc}, Total expense: {total_expense_20_incm}, Total profit:, {Total_mort_saving_proj_t20_20_inc - total_expense_20_incm_np}')

sen_result_df.loc[0, 'Total Profit INCM 5'] = Total_mort_saving_proj_t20_5_inc - total_expense_20_incm
sen_result_df.loc[0, 'Total Profit INCM 20'] = Total_mort_saving_proj_t20_20_inc - total_expense_20_incm



# Run with the project for whole life with INCM
# Run with the project for wl with INCM
mc_withp_wl_5_incm, mc_withp_wl_20_incm, total_expense_20_incm_wl, wl_df_incm_pj_wp = run_whole_data(SPWL_df_proj, mor_df_inc10, lapes_df, eco_df, 'wl')
#Run without the project for wl with INCM
mc_nop_wl_5_incm_np, mc_nop_wl_20_incm_np, total_expense_20_incm_np_wl, wl_df_incm_pj_wp_nop = run_whole_data(SPWL_df_proj, mor_df_inc10_np, lapes_df, eco_df, 'wl')
Total_mort_saving_proj_wl_5_inc = mc_nop_wl_5_incm_np - mc_withp_wl_5_incm
Total_mort_saving_proj_wl_20_inc = mc_nop_wl_20_incm_np - mc_withp_wl_20_incm
print(f'Total mortality Saving for WL in 5 years with inc m: {mc_nop_wl_5_incm_np} - {mc_withp_wl_5_incm} = {Total_mort_saving_proj_wl_5_inc}, Total expense: {total_expense_20_incm_wl}, Total profit:, {Total_mort_saving_proj_wl_5_inc - total_expense_20_incm_wl}')
print(f'Total mortality Saving for WL in 20 years with inc m: {mc_nop_wl_20_incm_np} - {mc_withp_wl_20_incm} = {Total_mort_saving_proj_wl_20_inc}, Total expense: {total_expense_20_incm_wl}, Total profit:, {Total_mort_saving_proj_wl_20_inc - total_expense_20_incm_wl}')
sen_result_df.loc[1, 'Total Profit INCM 5'] = Total_mort_saving_proj_wl_5_inc - total_expense_20_incm_wl
sen_result_df.loc[1, 'Total Profit INCM 20'] = Total_mort_saving_proj_wl_20_inc - total_expense_20_incm_wl

sen_result_df

"""## 3.2 Lapse rate Testing"""

lapes_df
#Create new lapse rate table for sensitivity test
lapes_df_dec = lapes_df.copy()
lapes_df_dec['distribution'] = lapes_df_dec['Lapes -10%']

lapes_df_inc = lapes_df.copy()
lapes_df_inc['distribution'] = lapes_df_inc['Lapes +10%']
lapes_df_inc

#Lapse rate has no effect on WL, only run for T20


# Run with the project for t20 with declapse
mc_withp_t20_5_declapse, mc_withp_t20_20_declapse, total_expense_20_declapse, t20_pj_wp_declapse = run_whole_data(t20_df_proj, mor_df_cleaned, lapes_df_dec, eco_df, 't20')

#Run without the project for t20 with declapse
mc_nop_t20_5_declapse_np, mc_nop_t20_20_declapse_np, total_expense_20_declapse_np, t20_pj_wp_declapse_np = run_whole_data(t20_df_proj, mor_df_nop, lapes_df_dec, eco_df, 't20')

Total_mort_saving_proj_t20_5_declapse = mc_nop_t20_5_declapse_np - mc_withp_t20_5_declapse
Total_mort_saving_proj_t20_20_declapse = mc_nop_t20_20_declapse_np - mc_withp_t20_20_declapse
print(f'Total mortality Saving for T20 in 5 years with dec lapse: {mc_nop_t20_5_declapse_np} - {mc_withp_t20_5_declapse} = {Total_mort_saving_proj_t20_5_declapse}, Total expense: {total_expense_20_declapse}, Total profit:, {Total_mort_saving_proj_t20_5_declapse - total_expense_20_declapse}')
print(f'Total mortality Saving for T20 in 20 years with dec lapse: {mc_nop_t20_20_declapse_np} - {mc_withp_t20_20_declapse} = {Total_mort_saving_proj_t20_20_declapse}, Total expense: {total_expense_20_declapse}, Total profit:, {Total_mort_saving_proj_t20_20_declapse - total_expense_20_declapse_np}')


sen_result_df.loc[0, 'Total Profit 5 for DEC LAPSE'] = Total_mort_saving_proj_t20_5_declapse - total_expense_20_declapse
sen_result_df.loc[0, 'Total Profit 20 for DEC LAPSE'] = Total_mort_saving_proj_t20_20_declapse - total_expense_20_declapse



# Run with the project for t20 with inclapse
mc_withp_t20_5_inclapse, mc_withp_t20_20_inclapse, total_expense_20_inclapse, t20_pj_wp_inclapse = run_whole_data(t20_df_proj, mor_df_cleaned, lapes_df_inc, eco_df, 't20')

#Run without the project for t20 with inclapse
mc_nop_t20_5_inclapse_np, mc_nop_t20_20_inclapse_np, total_expense_20_inclapse_np, t20_pj_wp_inclapse_np = run_whole_data(t20_df_proj, mor_df_nop, lapes_df_inc, eco_df, 't20')

Total_mort_saving_proj_t20_5_inclapse = mc_nop_t20_5_inclapse_np - mc_withp_t20_5_inclapse
Total_mort_saving_proj_t20_20_inclapse = mc_nop_t20_20_inclapse_np - mc_withp_t20_20_inclapse
print(f'Total mortality Saving for T20 in 5 years with inc lapse: {mc_nop_t20_5_inclapse_np} - {mc_withp_t20_5_inclapse} = {Total_mort_saving_proj_t20_5_inclapse}, Total expense: {total_expense_20_inclapse}, Total profit:, {Total_mort_saving_proj_t20_5_inclapse - total_expense_20_inclapse}')
print(f'Total mortality Saving for T20 in 20 years with inc lapse: {mc_nop_t20_20_inclapse_np} - {mc_withp_t20_20_inclapse} = {Total_mort_saving_proj_t20_20_inclapse}, Total expense: {total_expense_20_inclapse}, Total profit:, {Total_mort_saving_proj_t20_20_inclapse - total_expense_20_inclapse_np}')

sen_result_df.loc[0, 'Total Profit 5 for INC LAPSE'] = Total_mort_saving_proj_t20_5_inclapse - total_expense_20_inclapse
sen_result_df.loc[0, 'Total Profit 20 for INC LAPSE'] = Total_mort_saving_proj_t20_20_inclapse - total_expense_20_inclapse
sen_result_df

"""## 3.3 Interest rate (Discount rate)"""

eco_df

##### check economic value:
eco_df2 = eco_df.copy()
eco_df2['1-yr Risk Free Annual Spot Rate -10%'] = eco_df2['1-yr Risk Free Annual Spot Rate'] * 0.9
eco_df2['1-yr Risk Free Annual Spot Rate +10%'] = eco_df2['1-yr Risk Free Annual Spot Rate'] * 1.1
used_eco_df = eco_df2[eco_df2['Year'] >= 2024]
used_eco_df['Compound Rate'] = used_eco_df['1-yr Risk Free Annual Spot Rate'].add(1).cumprod()
used_eco_df['Compound Rate -10%'] = used_eco_df['1-yr Risk Free Annual Spot Rate -10%'].add(1).cumprod()
used_eco_df['Compound Rate +10%'] = used_eco_df['1-yr Risk Free Annual Spot Rate +10%'].add(1).cumprod()
used_eco_df

#Great df for sensitivity test
#Dec interest rate

eco_df_dec = eco_df.copy()
#replace 1-yr Risk Free Annual Spot Rate with 1-yr Risk Free Annual Spot Rate -10%
eco_df_dec['1-yr Risk Free Annual Spot Rate'] = eco_df_dec['1-yr Risk Free Annual Spot Rate'] * 0.9
eco_df_dec['One plus interest rate'] = 1 + eco_df_dec['1-yr Risk Free Annual Spot Rate']
#Calculate the compounded discount rate for 2000 and 2024
# Find the index where the Year equals 2000
start_index = eco_df_dec[eco_df_dec['Year'] == 2001].index.min()
# print(start_index)
# Apply cumprod() from the row where Year is 2000 onwards
eco_df_dec['compounded interest rate 2001'] = 1  # Initialize the column with 1s
eco_df_dec.loc[start_index:, 'compounded interest rate 2001'] = eco_df_dec.loc[start_index:, 'One plus interest rate'].cumprod()

# Find the index where the Year equals 2024
start_index_24 = eco_df_dec[eco_df_dec['Year'] == 2024].index.min()
# print(start_index_24)
# Apply cumprod() from the row where Year is 2024 onwards
eco_df_dec['compounded interest rate 2024'] = 1  # Initialize the column with 1s
eco_df_dec.loc[start_index_24:, 'compounded interest rate 2024'] = eco_df_dec.loc[start_index_24:, 'One plus interest rate'].cumprod()
eco_df_dec

#Create new interest rate table for sensitivity test
#Increase interest rate
eco_df_inc = eco_df.copy()
#replace 1-yr Risk Free Annual Spot Rate with 1-yr Risk Free Annual Spot Rate -10%
eco_df_inc['1-yr Risk Free Annual Spot Rate'] = eco_df_inc['1-yr Risk Free Annual Spot Rate'] * 1.1
eco_df_inc['One plus interest rate'] = 1 + eco_df_inc['1-yr Risk Free Annual Spot Rate']
#Calculate the compounded discount rate for 2000 and 2024
# Find the index where the Year equals 2000
start_index = eco_df_inc[eco_df_inc['Year'] == 2001].index.min()
# print(start_index)
# Apply cumprod() from the row where Year is 2000 onwards
eco_df_inc['compounded interest rate 2001'] = 1  # Initialize the column with 1s
eco_df_inc.loc[start_index:, 'compounded interest rate 2001'] = eco_df_inc.loc[start_index:, 'One plus interest rate'].cumprod()

# Find the index where the Year equals 2024
start_index_24 = eco_df_inc[eco_df_inc['Year'] == 2024].index.min()
# print(start_index_24)
# Apply cumprod() from the row where Year is 2024 onwards
eco_df_inc['compounded interest rate 2024'] = 1  # Initialize the column with 1s
eco_df_inc.loc[start_index_24:, 'compounded interest rate 2024'] = eco_df_inc.loc[start_index_24:, 'One plus interest rate'].cumprod()
eco_df_inc

#Run interst rate impact on T20

# Run with the project for t20 with decint
mc_withp_t20_5_decint, mc_withp_t20_20_decint, total_expense_20_decint, t20_pj_wp_decint = run_whole_data(t20_df_proj, mor_df_cleaned, lapes_df, eco_df_dec, 't20')

#Run without the project for t20 with decint
mc_nop_t20_5_decint_np, mc_nop_t20_20_decint_np, total_expense_20_decint_np, t20_pj_wp_decint_np = run_whole_data(t20_df_proj, mor_df_nop, lapes_df, eco_df_dec, 't20')

Total_mort_saving_proj_t20_5_decint = mc_nop_t20_5_decint_np - mc_withp_t20_5_decint
Total_mort_saving_proj_t20_20_decint = mc_nop_t20_20_decint_np - mc_withp_t20_20_decint
print(f'Total mortality Saving for T20 in 5 years with dec lapse: {mc_nop_t20_5_decint_np} - {mc_withp_t20_5_decint} = {Total_mort_saving_proj_t20_5_decint}, Total expense: {total_expense_20_decint}, Total profit:, {Total_mort_saving_proj_t20_5_decint - total_expense_20_decint}')
print(f'Total mortality Saving for T20 in 20 years with dec lapse: {mc_nop_t20_20_decint_np} - {mc_withp_t20_20_decint} = {Total_mort_saving_proj_t20_20_decint}, Total expense: {total_expense_20_decint}, Total profit:, {Total_mort_saving_proj_t20_20_decint - total_expense_20_decint_np}')


sen_result_df.loc[0, 'Total Profit 5 for DEC INT'] = Total_mort_saving_proj_t20_5_decint - total_expense_20_decint
sen_result_df.loc[0, 'Total Profit 20 for DEC INT'] = Total_mort_saving_proj_t20_20_decint - total_expense_20_decint



# Run with the project for t20 with inclapse
mc_withp_t20_5_inclapse, mc_withp_t20_20_inclapse, total_expense_20_inclapse, t20_pj_wp_inclapse = run_whole_data(t20_df_proj, mor_df_cleaned, lapes_df, eco_df_inc,'t20')

#Run without the project for t20 with inclapse
mc_nop_t20_5_inclapse_np, mc_nop_t20_20_inclapse_np, total_expense_20_inclapse_np, t20_pj_wp_inclapse_np = run_whole_data(t20_df_proj, mor_df_nop, lapes_df, eco_df_inc,'t20')

Total_mort_saving_proj_t20_5_inclapse = mc_nop_t20_5_inclapse_np - mc_withp_t20_5_inclapse
Total_mort_saving_proj_t20_20_inclapse = mc_nop_t20_20_inclapse_np - mc_withp_t20_20_inclapse
print(f'Total mortality Saving for T20 in 5 years with inc lapse: {mc_nop_t20_5_inclapse_np} - {mc_withp_t20_5_inclapse} = {Total_mort_saving_proj_t20_5_inclapse}, Total expense: {total_expense_20_inclapse}, Total profit:, {Total_mort_saving_proj_t20_5_inclapse - total_expense_20_inclapse}')
print(f'Total mortality Saving for T20 in 20 years with inc lapse: {mc_nop_t20_20_inclapse_np} - {mc_withp_t20_20_inclapse} = {Total_mort_saving_proj_t20_20_inclapse}, Total expense: {total_expense_20_inclapse}, Total profit:, {Total_mort_saving_proj_t20_20_inclapse - total_expense_20_inclapse_np}')

sen_result_df.loc[0, 'Total Profit 5 for INC INT'] = Total_mort_saving_proj_t20_5_inclapse - total_expense_20_inclapse
sen_result_df.loc[0, 'Total Profit 20 for INC INT'] = Total_mort_saving_proj_t20_20_inclapse - total_expense_20_inclapse
sen_result_df

#Run interst rate impact on Whole life

# Run with the project for whole life with decint
# Run with the project for wl with decint
mc_withp_wl_5_decint, mc_withp_wl_20_decint, total_expense_20_decint_wl, wl_df_dec_pj_wp = run_whole_data(SPWL_df_proj, mor_df_cleaned, lapes_df, eco_df_dec, 'wl')
#Run without the project for wl with decint
mc_nop_wl_5_decint_np, mc_nop_wl_20_decint_np, total_expense_20_decint_np_wl, wl_df_dec_pj_wp_nop = run_whole_data(SPWL_df_proj, mor_df_nop, lapes_df, eco_df_dec, 'wl')

Total_mort_saving_proj_wl_5_decint = mc_nop_wl_5_decint_np - mc_withp_wl_5_decint
Total_mort_saving_proj_wl_20_decint = mc_nop_wl_20_decint_np - mc_withp_wl_20_decint
print(f'Total mortality Saving for WL in 5 years with dec int: {mc_nop_wl_5_decint_np} - {mc_withp_wl_5_decint} = {Total_mort_saving_proj_wl_5_decint}, Total expense: {total_expense_20_decint_wl}, Total profit:, {Total_mort_saving_proj_wl_5_decint - total_expense_20_decint_wl}')
print(f'Total mortality Saving for WL in 20 years with dec int: {mc_nop_wl_20_decint_np} - {mc_withp_wl_20_decint} = {Total_mort_saving_proj_wl_20_decint}, Total expense: {total_expense_20_decint_wl}, Total profit:, {Total_mort_saving_proj_wl_20_decint - total_expense_20_decint_np_wl}')

sen_result_df.loc[1, 'Total Profit 5 for DEC INT'] = Total_mort_saving_proj_wl_5_decint - total_expense_20_decint_wl
sen_result_df.loc[1, 'Total Profit 20 for DEC INT'] = Total_mort_saving_proj_wl_20_decint - total_expense_20_decint_wl

sen_result_df

# Run with the project for whole life with incint
# Run with the project for wl with incint
mc_withp_wl_5_incint, mc_withp_wl_20_incint, total_expense_20_incint_wl, wl_df_incint_pj_wp = run_whole_data(SPWL_df_proj, mor_df_cleaned, lapes_df, eco_df_inc, 'wl')
#Run without the project for wl with incint
mc_nop_wl_5_incint_np, mc_nop_wl_20_incint_np, total_expense_20_incint_np_wl, wl_df_incint_pj_wp_nop = run_whole_data(SPWL_df_proj, mor_df_nop, lapes_df, eco_df_inc, 'wl')

Total_mort_saving_proj_wl_5_incint = mc_nop_wl_5_incint_np - mc_withp_wl_5_incint
Total_mort_saving_proj_wl_20_incint = mc_nop_wl_20_incint_np - mc_withp_wl_20_incint
print(f'Total mortality Saving for WL in 5 years with inc int: {mc_nop_wl_5_incint_np} - {mc_withp_wl_5_incint} = {Total_mort_saving_proj_wl_5_incint}, Total expense: {total_expense_20_incint_wl}, Total profit:, {Total_mort_saving_proj_wl_5_incint - total_expense_20_incint_wl}')
print(f'Total mortality Saving for WL in 20 years with inc int: {mc_nop_wl_20_incint_np} - {mc_withp_wl_20_incint} = {Total_mort_saving_proj_wl_20_incint}, Total expense: {total_expense_20_incint_wl}, Total profit:, {Total_mort_saving_proj_wl_20_incint - total_expense_20_incint_np_wl}')

sen_result_df.loc[1, 'Total Profit 5 for INC INT'] = Total_mort_saving_proj_wl_5_incint - total_expense_20_incint_wl
sen_result_df.loc[1, 'Total Profit 20 for INC INT'] = Total_mort_saving_proj_wl_20_incint - total_expense_20_incint_wl
sen_result_df

"""## 3.4 Inflation rate"""

expense = 210
current = 2024

# get the average inflation rate for the past 10 yeas

sum = 0
for year in range(2013, 2024):
    inflation_str = eco_df.loc[eco_df['Year'] == year, 'Inflation'].values[0]
    # inflation = float(inflation_str.rstrip('%')) / 100  # Remove '%' and convert to float
    #Juliet file
    inflation = float(inflation_str)
    #END
    sum += inflation

average_inflation = sum/10
print("average inflation:", average_inflation)

average_discounted = (0.0312 + 0.029)/2

# Create a list of years from 2024 to 2044
years = list(range(2024, 2125))

# Create a DataFrame with years as index
exp_df = pd.DataFrame(index = years)

exp_df['Year'] = years
exp_df['Expense'] = expense
exp_df['Expense after inflation'] = expense
exp_df['discounted rate'] = 1
exp_df['Expense after inflation'] = expense
exp_df['Expense after inflation -10%'] = expense
exp_df['Expense after inflation +10%'] = expense
exp_df['discounted rate -10%'] = 1
exp_df['discounted rate +10%'] = 1

####### all the discounted rate and inflation rate was calculated as sop value sinve we assumed the expense was pay out in the begining of the year
for element in range(2025, 2125):
 exp_df.loc[exp_df['Year'] == element, 'Expense after inflation'] = exp_df.loc[exp_df['Year'] == element, 'Expense'] * ( (1 + average_inflation) ** (element - 2024))

 exp_df.loc[exp_df['Year'] == element, 'discounted rate'] = ( 1 + average_discounted) ** (element - 2024)

 ## for sensitivity test:
 exp_df.loc[exp_df['Year'] == element, 'Expense after inflation -10%'] = exp_df.loc[exp_df['Year'] == element, 'Expense'] * ( (1 + average_inflation * 0.9) ** (element - 2024))
 exp_df.loc[exp_df['Year'] == element, 'Expense after inflation +10%'] = exp_df.loc[exp_df['Year'] == element, 'Expense'] * ( (1 + average_inflation * 1.1) ** (element - 2024))
 exp_df.loc[exp_df['Year'] == element, 'discounted rate -10%'] = ( 1 + average_discounted * 0.9) ** (element - 2024)
 exp_df.loc[exp_df['Year'] == element, 'discounted rate +10%'] = ( 1 + average_discounted * 1.1) ** (element - 2024)



# Display the DataFrame
print(exp_df)

exp_df

used_eco_df

def calculate_expense_policy(mortality_tb, lapes_df, interest_rate_table, exp_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, end_year, rate_statu, inflation_statue, product):
    # Assume maximum age is 120
    max_age = 120


    # Extract the correct mortality rate column
    mortality_column = f'{smoking_status}_{underwriting_class}_mortality'

    # Prepare a DataFrame to hold the calculations for each year
    # df_calculations = pd.DataFrame(columns=['Year', 'Mortality Rate', 'Lapse Rate', 'In Force (sop)', 'Deaths', 'Lapses', 'In Force (eop)', 'Death Benefits (eop)'])
    calculations_list = []

    # Initialize in-force policies at start of period (sop) for year 0
    in_force_sop = 1.0
    compounded_interest_rate = 1.0 # Initialize with 1 for the base year (year 0)
    total_death_benefits_sop = 0


    # Calculate the one_plus_interest_rate for each year starting from issue_year + 1
    interest_rate_df = interest_rate_table.set_index('Year')
    if rate_statu == "Normal":
      one_plus_interest_rates = 1 + interest_rate_df['1-yr Risk Free Annual Spot Rate']
    elif rate_statu == "Lower":
      one_plus_interest_rates = 1 + interest_rate_df['1-yr Risk Free Annual Spot Rate -10%']
    elif rate_statu == "Higher":
      one_plus_interest_rates = 1 + interest_rate_df['1-yr Risk Free Annual Spot Rate +10%']


    # Iterate over each year from issue age until max_age
    for year in range((max_age - issue_age)+1):


        age = issue_age + year #Mortality start from age +1 (first row mort and lapse empty)
        policy_year = issue_year + year

        if policy_year > end_year:
          break
        # # Calculate one_plus_interest_rate for the current year
        # one_plus_interest_rate = one_plus_interest_rates.get(policy_year + 1, np.nan)

        # # Calculate compounded_interest_rate for the current year
        # compounded_interest_rate *= one_plus_interest_rate if year > 0 else np.nan

        # Initialize default values for the first year
        mortality_rate = None
        lapse_rate = None
        deaths = None
        lapses = None
        death_benefits_eop = None
        death_benefits_sop = None
        if year == 0:
          one_plus_interest_rate = 1
          compounded_interest_rate = 1

        #    # For years after the first year, calculate the values
        if year > 0:
          # Find the mortality rate for the given age
          mortality_rate = mortality_tb.loc[mortality_tb['Age'] == age, mortality_column].values[0] if age < mortality_tb['Age'].max() else 1

          # Find the lapse rate for the given age
          # lapse_rate = lapse_rate_table_0.loc[lapse_rate_table_0['Age'] == age, 'Lapse Rate'].values[0] if age < lapse_rate_table_0['Age'].max() else 0
          lapse_rate = 0
          # Calculate deaths and lapses
          deaths = mortality_rate * in_force_sop


          lapses = 0
          if product == 'T20':
            # lapse_rate = lapse_rate_table.loc[lapse_rate_table['Age'] == age, 'Lapse Rate'].values[0] if age < lapse_rate_table['Age'].max() else 0
            lapse_rate = lapes_df.loc[lapes_df['Year'] == year, 'distribution'].values[0] if year <= lapes_df['Year'].max() else 0
            lapses = min(lapse_rate * in_force_sop, in_force_sop - deaths)


          # Calculate one_plus_interest_rate for the current year
          one_plus_interest_rate = one_plus_interest_rates.get(policy_year, np.nan)

          # Calculate compounded_interest_rate for the current year
          compounded_interest_rate *= one_plus_interest_rate

          # Calculate death benefits paid out at end of period (eop)
          death_benefits_eop = deaths * face_amount


          # Calculate death benefits (sop) using the compounded interest rate
          death_benefits_sop = death_benefits_eop / compounded_interest_rate



        # Calculate in-force policies at end of period (eop) - this remains the same for year 0
        in_force_eop = in_force_sop - (deaths) if year > 0 else in_force_sop

        current_time = year + issue_year
        # print(policy_year)
        # print(one_plus_interest_rate)
        # print(compounded_interest_rate)


        expense = in_force_sop * float(exp_df.loc[exp_df['Year'] == current_time, 'Expense after inflation'].item()) / compounded_interest_rate

        if inflation_statue == 'Lower':
          expense = in_force_sop * float(exp_df.loc[exp_df['Year'] == current_time, 'Expense after inflation -10%'].item()) / compounded_interest_rate

        if inflation_statue == 'Higher':
          expense = in_force_sop * float(exp_df.loc[exp_df['Year'] == current_time, 'Expense after inflation +10%'].item()) / compounded_interest_rate

        # print(in_force_sop)



        # Append the calculations for the current year to the DataFrame
        calculations_list.append({
            'Year': year,
            'current_year': current_time,
            'Mortality Rate': mortality_rate,
            'Lapse Rate': lapse_rate,
            'In Force (sop)': in_force_sop,
            'Deaths': deaths,
            'Lapses': lapses,
            'In Force (eop)': in_force_eop,
            'One plus interest rate': one_plus_interest_rate,
            'compounded_interest_rate': compounded_interest_rate,
            'Death Benefits (eop)': death_benefits_eop,
            'Death Benefits (sop)': death_benefits_sop,
            'expense': expense
            })

        # Update in-force policies at start of period (sop) for next year
        in_force_sop = in_force_eop

    # Convert the list of calculations to a DataFrame
    df_calculations = pd.DataFrame(calculations_list)



    if end_year != None:
      df_select_cal = df_calculations[df_calculations['current_year'] <= end_year]
      total_expense = df_select_cal['expense'].sum().round()
    else:
      total_expense = df_calculations['expense'].sum().round()
    return total_expense, df_calculations

mor_df_cleaned

# Call the function with example inputs
# total_expense, calculations_df = calculate_expense_policy(
#     mor_df_nop, lapes_df, used_eco_df, exp_df, 41, 2024, 2000000, 'NS', 'very_low_risk', 2029, 'Normal', 'Normal', 'T20'
# )


total_expense, calculations_df = calculate_expense_policy(
    mor_df_nop, lapes_df, used_eco_df, exp_df, 44, 2028, 250000, 'NS', 'very_low_risk', 2029, 'Lower', 'Normal', 'T20'
)




print(f'Total Expense: {total_expense}')
calculations_df  # Show the first few rows of the DataFrame with yearly calculations

used_eco_df

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from tqdm.notebook import tqdm
# tqdm.pandas()
# 
# 
# split the new_df

# Get unique policy types
unique_policy_types = new_df['Policy.type'].unique()

# Create a dictionary to store DataFrames for each policy type
type_data = {}

# Iterate over unique policy types
for policy_type in unique_policy_types:
    # Filter the DataFrame for the current policy type
    policy_type_df = new_df[new_df['Policy.type'] == policy_type]

    # Store the filtered DataFrame in the dictionary
    type_data[policy_type] = policy_type_df

# new_t20_df = type_data['T20']

# new_spwl_df = type_data['SPWL']
new_t20_df = t20_df_proj.copy()
new_spwl_df = SPWL_df_proj

#Calculate the number of each policy risk in force

# new_spwl_df = type_data['SPWL']

#Calculate the total mortality saving for whole life

# Define a wrapper function to apply
def wrapper_apply_expense_t20(row, interest_type, inflation_type , end_year):
    # Extract the issue_age for the policy issue year
    issue_age = row['Issue.age']
    # print(issue_age)
    issue_year = row['Issue.year']
    # print(issue_year)
    face_amount = row['Face.amount']
    # print(face_amount)
    smoking_status = row['Smoker.Status']
    # print(smoking_status)
    underwriting_class = row['Underwriting.Class'].replace(' ', '_')

    if interest_type == 'Lower':
      return calculate_expense_policy(mor_df_cleaned, lapes_df, used_eco_df, exp_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, end_year, 'Lower', 'Normal', 'T20')

    if interest_type == 'Higher':
      return calculate_expense_policy(mor_df_cleaned, lapes_df, used_eco_df, exp_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, end_year, 'Higher', 'Normal', 'T20')

    if inflation_type == 'Lower':
      return calculate_expense_policy(mor_df_cleaned, lapes_df, used_eco_df, exp_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, end_year, 'Normal', 'Lower', 'T20')

    if inflation_type == 'Higher':
      return calculate_expense_policy(mor_df_cleaned, lapes_df, used_eco_df, exp_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, end_year, 'Normal', 'Higher', 'T20')

    # Calculate the expected claim cost for the row
    return calculate_expense_policy(mor_df_cleaned, lapes_df, used_eco_df, exp_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, end_year, 'Normal', 'Normal', 'T20')

### 5 year short run normal interest rate, normal inflation rate
end_year = 2029
used_t20_df = new_t20_df[new_t20_df['Issue.year'] <= end_year].copy()
# print(used_t20_df)
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_t20_df['expense_sop'] = used_t20_df.apply(lambda x: wrapper_apply_expense_t20(x, 'Normal', 'Normal', end_year)[0], axis=1)

# used_t20_df['expense_back to 2024'] = used_t20_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'], axis=1)
used_t20_df['expense_back to 2024'] = used_t20_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)

# Calculate the total expected claim cost with out the program

# print(used_t20_df['expense_back to 2024'])
total_expense = used_t20_df['expense_back to 2024'].sum()
# print(used_t20_df)
print(f'Total expense for all policies: {total_expense}')

### 5 year short run lower interest rate, normal inflation rate
end_year = 2029
used_t20_df = new_t20_df[new_t20_df['Issue.year'] <= end_year]
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_t20_df['expense_sop'] = used_t20_df.apply(lambda x: wrapper_apply_expense_t20(x, 'Lower', 'Normal', end_year)[0], axis=1)

used_t20_df['expense_back to 2024'] = used_t20_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate -10%'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_t20_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 5 year short run higher interest rate, normal inflation rate
end_year = 2029
used_t20_df = new_t20_df[new_t20_df['Issue.year'] <= end_year]
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_t20_df['expense_sop'] = used_t20_df.apply(lambda x: wrapper_apply_expense_t20(x, 'Higher', 'Normal', end_year)[0], axis=1)

used_t20_df['expense_back to 2024'] = used_t20_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate +10%'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_t20_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')


### 5 year short run normal interest rate, Lower inflation rate
end_year = 2029
used_t20_df = new_t20_df[new_t20_df['Issue.year'] <= end_year]
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_t20_df['expense_sop'] = used_t20_df.apply(lambda x: wrapper_apply_expense_t20(x, 'Normal', 'Lowet', end_year)[0], axis=1)

used_t20_df['expense_back to 2024'] = used_t20_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_t20_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 5 year short run normal interest rate, Higher inflation rate
end_year = 2029
used_t20_df = new_t20_df[new_t20_df['Issue.year'] <= end_year]
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_t20_df['expense_sop'] = used_t20_df.apply(lambda x: wrapper_apply_expense_t20(x, 'Normal', 'Higher', end_year)[0], axis=1)

used_t20_df['expense_back to 2024'] = used_t20_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_t20_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')


## 20 year short run normal interest rate, normal inflation rate
end_year = 2045
used_t20_df = new_t20_df[new_t20_df['Issue.year'] <= end_year]
used_t20_df_len = len(used_t20_df)
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
#sample
used_t20_df = used_t20_df.sample(used_t20_df_len, replace=True)
used_t20_df['expense_sop'] = used_t20_df.apply(lambda x: wrapper_apply_expense_t20(x, 'Normal', 'Normal', end_year)[0], axis=1)

used_t20_df['expense_back to 2024'] = used_t20_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_t20_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 20 year short run lower interest rate, normal inflation rate
end_year = 2045
used_t20_df = new_t20_df[new_t20_df['Issue.year'] <= end_year]
used_t20_df = used_t20_df.sample(used_t20_df_len, replace=True)
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_t20_df['expense_sop'] = used_t20_df.apply(lambda x: wrapper_apply_expense_t20(x, 'Lower', 'Normal', end_year)[0], axis=1)

used_t20_df['expense_back to 2024'] = used_t20_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate -10%'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_t20_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 20 year short run higher interest rate, normal inflation rate
end_year = 2045
used_t20_df = new_t20_df[new_t20_df['Issue.year'] <= end_year]
used_t20_df = used_t20_df.sample(used_t20_df_len, replace=True)
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_t20_df['expense_sop'] = used_t20_df.apply(lambda x: wrapper_apply_expense_t20(x, 'Higher', 'Normal', end_year)[0], axis=1)

used_t20_df['expense_back to 2024'] = used_t20_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate +10%'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_t20_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 20 year short run normal interest rate, Lower inflation rate
end_year = 2045
used_t20_df = new_t20_df[new_t20_df['Issue.year'] <= end_year]
used_t20_df = used_t20_df.sample(used_t20_df_len, replace=True)
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_t20_df['expense_sop'] = used_t20_df.apply(lambda x: wrapper_apply_expense_t20(x, 'Normal', 'Lowet', end_year)[0], axis=1)

used_t20_df['expense_back to 2024'] = used_t20_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_t20_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 20 year short run normal interest rate, Higher inflation rate
end_year = 2045
used_t20_df = new_t20_df[new_t20_df['Issue.year'] <= end_year]
used_t20_df = used_t20_df.sample(used_t20_df_len, replace=True)
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_t20_df['expense_sop'] = used_t20_df.apply(lambda x: wrapper_apply_expense_t20(x, 'Normal', 'Higher', end_year)[0], axis=1)

used_t20_df['expense_back to 2024'] = used_t20_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_t20_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from tqdm.notebook import tqdm
# tqdm.pandas()
# 

# split the new_df

# Get unique policy types
unique_policy_types = new_df['Policy.type'].unique()

# Create a dictionary to store DataFrames for each policy type
type_data = {}

# Iterate over unique policy types
for policy_type in unique_policy_types:
    # Filter the DataFrame for the current policy type
    policy_type_df = new_df[new_df['Policy.type'] == policy_type]

    # Store the filtered DataFrame in the dictionary
    type_data[policy_type] = policy_type_df

new_t20_df = t20_df_proj.copy()

new_spwl_df = SPWL_df_proj.copy()

#Calculate the total mortality saving for whole life

# Define a wrapper function to apply
def wrapper_apply_expense(row, interest_type, inflation_type , end_year):
    # Extract the issue_age for the policy issue year
    issue_age = row['Issue.age']
    # print(issue_age)
    issue_year = row['Issue.year']
    # print(issue_year)
    face_amount = row['Face.amount']
    # print(face_amount)
    smoking_status = row['Smoker.Status']
    # print(smoking_status)
    underwriting_class = row['Underwriting.Class'].replace(' ', '_')

    if interest_type == 'Lower':
      return calculate_expense_policy(mor_df_cleaned, lapes_df, used_eco_df, exp_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, end_year, 'Lower', 'Normal', 'swpl')

    if interest_type == 'Higher':
      return calculate_expense_policy(mor_df_cleaned, lapes_df, used_eco_df, exp_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, end_year, 'Higher', 'Normal', 'swpl')

    if inflation_type == 'Lower':
      return calculate_expense_policy(mor_df_cleaned, lapes_df, used_eco_df, exp_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, end_year, 'Normal', 'Lower', 'swpl')

    if inflation_type == 'Higher':
      return calculate_expense_policy(mor_df_cleaned, lapes_df, used_eco_df, exp_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, end_year, 'Normal', 'Higher', 'swpl')

    # Calculate the expected claim cost for the row
    return calculate_expense_policy(mor_df_cleaned, lapes_df, used_eco_df, exp_df, issue_age, issue_year, face_amount, smoking_status, underwriting_class, end_year, 'Normal', 'Normal', 'spwl')

### 5 year short run normal interest rate, normal inflation rate
end_year = 2029
used_spwl_df = new_spwl_df[new_spwl_df['Issue.year'] <= end_year].copy()
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_spwl_df['expense_sop'] = used_spwl_df.apply(lambda x: wrapper_apply_expense(x, 'Normal', 'Normal', end_year)[0], axis=1)

used_spwl_df['expense_back to 2024'] = used_spwl_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_spwl_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 5 year short run lower interest rate, normal inflation rate
end_year = 2029
used_spwl_df = new_spwl_df[new_spwl_df['Issue.year'] <= end_year].copy()
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_spwl_df['expense_sop'] = used_spwl_df.apply(lambda x: wrapper_apply_expense(x, 'Lower', 'Normal', end_year)[0], axis=1)

used_spwl_df['expense_back to 2024'] = used_spwl_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate -10%'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_spwl_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 5 year short run higher interest rate, normal inflation rate
end_year = 2029
used_spwl_df = new_spwl_df[new_spwl_df['Issue.year'] <= end_year].copy()
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_spwl_df['expense_sop'] = used_spwl_df.apply(lambda x: wrapper_apply_expense(x, 'Higher', 'Normal', end_year)[0], axis=1)

used_spwl_df['expense_back to 2024'] = used_spwl_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate +10%'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_spwl_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')


### 5 year short run normal interest rate, Lower inflation rate
end_year = 2029
used_spwl_df = new_spwl_df[new_spwl_df['Issue.year'] <= end_year].copy()
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_spwl_df['expense_sop'] = used_spwl_df.apply(lambda x: wrapper_apply_expense(x, 'Normal', 'Lowet', end_year)[0], axis=1)

used_spwl_df['expense_back to 2024'] = used_spwl_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_spwl_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 5 year short run normal interest rate, Higher inflation rate
end_year = 2029
used_spwl_df = new_spwl_df[new_spwl_df['Issue.year'] <= end_year].copy()
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_spwl_df['expense_sop'] = used_spwl_df.apply(lambda x: wrapper_apply_expense(x, 'Normal', 'Higher', end_year)[0], axis=1)

used_spwl_df['expense_back to 2024'] = used_spwl_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_spwl_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')




### 20 year short run normal interest rate, normal inflation rate
end_year = 2043
used_spwl_df = new_spwl_df[new_spwl_df['Issue.year'] <= end_year].copy()
used_spwl_df_len = len(used_spwl_df)
#sample
used_spwl_df = used_spwl_df.sample(used_spwl_df_len, replace=True)
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[0], axis=1)
used_spwl_df['expense_sop'] = used_spwl_df.apply(lambda x: wrapper_apply_expense(x, 'Normal', 'Normal', end_year)[0], axis=1)

used_spwl_df['expense_back to 2024'] = used_spwl_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_spwl_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 20 year short run lower interest rate, normal inflation rate
end_year = 2043
used_spwl_df = new_spwl_df[new_spwl_df['Issue.year'] <= end_year].copy()
used_spwl_df = used_spwl_df.sample(used_spwl_df_len, replace=True)
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_spwl_df['expense_sop'] = used_spwl_df.apply(lambda x: wrapper_apply_expense(x, 'Lower', 'Normal', end_year)[0], axis=1)

used_spwl_df['expense_back to 2024'] = used_spwl_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate -10%'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_spwl_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 20 year short run higher interest rate, normal inflation rate
end_year = 2043
used_spwl_df = new_spwl_df[new_spwl_df['Issue.year'] <= end_year].copy()
used_spwl_df = used_spwl_df.sample(used_spwl_df_len, replace=True)
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_spwl_df['expense_sop'] = used_spwl_df.apply(lambda x: wrapper_apply_expense(x, 'Higher', 'Normal', end_year)[0], axis=1)

used_spwl_df['expense_back to 2024'] = used_spwl_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate +10%'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_spwl_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')





### 20 year short run normal interest rate, Lower inflation rate
end_year = 2043
used_spwl_df = new_spwl_df[new_spwl_df['Issue.year'] <= end_year].copy()
used_spwl_df = used_spwl_df.sample(used_spwl_df_len, replace=True)
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_spwl_df['expense_sop'] = used_spwl_df.apply(lambda x: wrapper_apply_expense(x, 'Normal', 'Lowet', end_year)[0], axis=1)

used_spwl_df['expense_back to 2024'] = used_spwl_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_spwl_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')

### 20 year short run normal interest rate, Higher inflation rate
end_year = 2043
used_spwl_df = new_spwl_df[new_spwl_df['Issue.year'] <= end_year].copy()
used_spwl_df = used_spwl_df.sample(used_spwl_df_len, replace=True)
# spwl_df_select['Expected_Claim_Cost_sop'] = spwl_df_select.apply(lambda x: wrapper_apply_policy_cost(x)[1], axis=1)
used_spwl_df['expense_sop'] = used_spwl_df.apply(lambda x: wrapper_apply_expense(x, 'Normal', 'Higher', end_year)[0], axis=1)

used_spwl_df['expense_back to 2024'] = used_spwl_df.apply(lambda x: x['expense_sop']/used_eco_df.loc[used_eco_df['Year'] == x['Issue.year'],'Compound Rate'].values[0], axis=1)
# Calculate the total expected claim cost with out the program
total_expense = used_spwl_df['expense_back to 2024'].sum()

print(f'Total expense for all policies: {total_expense}')